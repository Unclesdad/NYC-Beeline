"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "src_components_Map_tsx";
exports.ids = ["src_components_Map_tsx"];
exports.modules = {

/***/ "./src/components/Map.tsx":
/*!********************************!*\
  !*** ./src/components/Map.tsx ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_leaflet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-leaflet */ \"react-leaflet\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! leaflet */ \"leaflet\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(leaflet__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! leaflet/dist/leaflet.css */ \"./node_modules/leaflet/dist/leaflet.css\");\n/* harmony import */ var leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_4__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([react_leaflet__WEBPACK_IMPORTED_MODULE_2__]);\nreact_leaflet__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n// Fix for Leaflet default icon issue in Next.js\nconst fixLeafletIcon = ()=>{\n    // Fix the default icon paths\n    delete (leaflet__WEBPACK_IMPORTED_MODULE_3___default().Icon).Default.prototype._getIconUrl;\n    leaflet__WEBPACK_IMPORTED_MODULE_3___default().Icon.Default.mergeOptions({\n        iconRetinaUrl: \"https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png\",\n        iconUrl: \"https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png\",\n        shadowUrl: \"https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png\"\n    });\n};\n// Custom icon for different transport modes\nconst getTransportIcon = (mode)=>{\n    let color;\n    switch(mode){\n        case \"subway\":\n            color = \"blue\";\n            break;\n        case \"bus\":\n            color = \"green\";\n            break;\n        case \"ebike\":\n            color = \"purple\";\n            break;\n        case \"taxi\":\n        case \"uber\":\n            color = \"orange\";\n            break;\n        case \"walk\":\n            color = \"gray\";\n            break;\n        default:\n            color = \"red\";\n    }\n    return leaflet__WEBPACK_IMPORTED_MODULE_3___default().divIcon({\n        className: \"custom-div-icon\",\n        html: `<div style=\"background-color: ${color}; width: 12px; height: 12px; border-radius: 50%; border: 2px solid white;\"></div>`,\n        iconSize: [\n            12,\n            12\n        ],\n        iconAnchor: [\n            6,\n            6\n        ]\n    });\n};\n// Define the route colors for different modes\nconst getRouteColor = (mode)=>{\n    switch(mode){\n        case \"subway\":\n            return \"#3b82f6\"; // blue-500 - more vibrant blue for subway\n        case \"bus\":\n            return \"#16a34a\"; // green-600 - darker green for better visibility\n        case \"ebike\":\n            return \"#8b5cf6\"; // purple-500\n        case \"taxi\":\n            return \"#f59e0b\"; // amber-500\n        case \"uber\":\n            return \"#f97316\"; // orange-500 - distinct from taxi\n        case \"walk\":\n            return \"#6b7280\"; // gray-500\n        case \"ferry\":\n            return \"#0ea5e9\"; // sky-500\n        case \"shared\":\n            return \"#ec4899\"; // pink-500\n        default:\n            return \"#ef4444\"; // red-500\n    }\n};\n// NYC subway routes - adding more realistic subway paths\nconst subwayRoutes = {\n    // 7 train (Flushing Line) - more detailed path with realistic curves\n    \"7\": [\n        [\n            40.7613,\n            -73.8067\n        ],\n        [\n            40.7608,\n            -73.8114\n        ],\n        [\n            40.7596,\n            -73.8305\n        ],\n        [\n            40.7573,\n            -73.8398\n        ],\n        [\n            40.7549,\n            -73.8458\n        ],\n        [\n            40.7532,\n            -73.8544\n        ],\n        [\n            40.7517,\n            -73.8630\n        ],\n        [\n            40.7500,\n            -73.8704\n        ],\n        [\n            40.7486,\n            -73.8778\n        ],\n        [\n            40.7473,\n            -73.8846\n        ],\n        [\n            40.7460,\n            -73.8915\n        ],\n        [\n            40.7445,\n            -73.9020\n        ],\n        [\n            40.7431,\n            -73.9126\n        ],\n        [\n            40.7424,\n            -73.9164\n        ],\n        [\n            40.7417,\n            -73.9202\n        ],\n        [\n            40.7405,\n            -73.9301\n        ],\n        [\n            40.7395,\n            -73.9401\n        ],\n        [\n            40.7383,\n            -73.9443\n        ],\n        [\n            40.7370,\n            -73.9486\n        ],\n        [\n            40.7408,\n            -73.9507\n        ],\n        [\n            40.7445,\n            -73.9529\n        ],\n        [\n            40.7442,\n            -73.9564\n        ],\n        [\n            40.7439,\n            -73.9601\n        ],\n        [\n            40.7435,\n            -73.9653\n        ],\n        [\n            40.7432,\n            -73.9706\n        ],\n        [\n            40.7431,\n            -73.9772\n        ],\n        [\n            40.7430,\n            -73.9838\n        ],\n        [\n            40.7434,\n            -73.9885\n        ],\n        [\n            40.7439,\n            -73.9931\n        ],\n        [\n            40.7474,\n            -73.9915\n        ],\n        [\n            40.7509,\n            -73.9900\n        ],\n        [\n            40.7528,\n            -73.9807\n        ],\n        [\n            40.7547,\n            -73.9714\n        ],\n        [\n            40.7487,\n            -73.9894\n        ],\n        [\n            40.7426,\n            -74.0074\n        ],\n        [\n            40.7467,\n            -74.0049\n        ],\n        [\n            40.7508,\n            -74.0025\n        ],\n        [\n            40.7528,\n            -73.9972\n        ],\n        [\n            40.7548,\n            -73.9919\n        ],\n        [\n            40.7569,\n            -73.9879\n        ],\n        [\n            40.7591,\n            -73.9840\n        ],\n        [\n            40.7608,\n            -73.9739\n        ],\n        [\n            40.7626,\n            -73.9639\n        ]\n    ],\n    // A train (more realistic with curves and bends)\n    \"A\": [\n        // Manhattan section with better handling of turns/curves\n        [\n            40.7046,\n            -74.0133\n        ],\n        [\n            40.7066,\n            -74.0092\n        ],\n        [\n            40.7105,\n            -74.0094\n        ],\n        [\n            40.7146,\n            -74.0064\n        ],\n        [\n            40.7176,\n            -74.0037\n        ],\n        [\n            40.7195,\n            -74.0020\n        ],\n        [\n            40.7214,\n            -74.0004\n        ],\n        [\n            40.7232,\n            -73.9987\n        ],\n        [\n            40.7250,\n            -73.9890\n        ],\n        [\n            40.7278,\n            -73.9881\n        ],\n        [\n            40.7307,\n            -73.9873\n        ],\n        [\n            40.7328,\n            -73.9889\n        ],\n        [\n            40.7349,\n            -73.9906\n        ],\n        [\n            40.7387,\n            -73.9887\n        ],\n        [\n            40.7425,\n            -73.9869\n        ],\n        [\n            40.7446,\n            -73.9842\n        ],\n        [\n            40.7467,\n            -73.9815\n        ],\n        [\n            40.7485,\n            -73.9790\n        ],\n        [\n            40.7504,\n            -73.9766\n        ],\n        [\n            40.7511,\n            -73.9732\n        ],\n        [\n            40.7518,\n            -73.9698\n        ],\n        [\n            40.7603,\n            -73.9660\n        ],\n        [\n            40.7687,\n            -73.9622\n        ],\n        [\n            40.7730,\n            -73.9607\n        ],\n        [\n            40.7773,\n            -73.9591\n        ],\n        [\n            40.7784,\n            -73.9574\n        ],\n        [\n            40.7795,\n            -73.9558\n        ],\n        [\n            40.7821,\n            -73.9566\n        ],\n        [\n            40.7847,\n            -73.9574\n        ],\n        [\n            40.7869,\n            -73.9570\n        ],\n        [\n            40.7892,\n            -73.9565\n        ],\n        [\n            40.7937,\n            -73.9543\n        ],\n        [\n            40.7979,\n            -73.9455\n        ],\n        [\n            40.8012,\n            -73.9402\n        ],\n        [\n            40.8044,\n            -73.9317\n        ],\n        [\n            40.8095,\n            -73.9291\n        ],\n        [\n            40.8135,\n            -73.9266\n        ]\n    ]\n};\n// NYC bus routes with more points to follow street patterns\nconst busRoutes = {\n    // M60 (LaGuardia Airport - Manhattan) - more detailed route following streets\n    \"M60\": [\n        [\n            40.7769,\n            -73.8740\n        ],\n        [\n            40.7764,\n            -73.8789\n        ],\n        [\n            40.7760,\n            -73.8848\n        ],\n        [\n            40.7758,\n            -73.8905\n        ],\n        [\n            40.7755,\n            -73.8973\n        ],\n        [\n            40.7752,\n            -73.9032\n        ],\n        [\n            40.7748,\n            -73.9077\n        ],\n        [\n            40.7745,\n            -73.9121\n        ],\n        [\n            40.7738,\n            -73.9154\n        ],\n        [\n            40.7729,\n            -73.9178\n        ],\n        [\n            40.7722,\n            -73.9204\n        ],\n        [\n            40.7717,\n            -73.9218\n        ],\n        [\n            40.7712,\n            -73.9230\n        ],\n        [\n            40.7709,\n            -73.9245\n        ],\n        [\n            40.7707,\n            -73.9266\n        ],\n        [\n            40.7705,\n            -73.9287\n        ],\n        [\n            40.7700,\n            -73.9318\n        ],\n        [\n            40.7695,\n            -73.9347\n        ],\n        [\n            40.7690,\n            -73.9372\n        ],\n        [\n            40.7685,\n            -73.9392\n        ],\n        [\n            40.7674,\n            -73.9428\n        ],\n        [\n            40.7662,\n            -73.9456\n        ],\n        [\n            40.7645,\n            -73.9489\n        ],\n        [\n            40.7658,\n            -73.9522\n        ],\n        [\n            40.7693,\n            -73.9565\n        ],\n        [\n            40.7727,\n            -73.9610\n        ],\n        [\n            40.7789,\n            -73.9550\n        ],\n        [\n            40.7911,\n            -73.9536\n        ],\n        [\n            40.8027,\n            -73.9517\n        ],\n        [\n            40.8084,\n            -73.9470\n        ],\n        [\n            40.8088,\n            -73.9495\n        ],\n        [\n            40.8092,\n            -73.9521\n        ],\n        [\n            40.8097,\n            -73.9540\n        ],\n        [\n            40.8104,\n            -73.9564\n        ],\n        [\n            40.8109,\n            -73.9587\n        ],\n        [\n            40.8113,\n            -73.9610\n        ],\n        [\n            40.8118,\n            -73.9635\n        ],\n        [\n            40.8126,\n            -73.9666\n        ],\n        [\n            40.8130,\n            -73.9734\n        ],\n        [\n            40.8134,\n            -73.9802\n        ]\n    ],\n    // Q44 with more detailed routing\n    \"Q44\": [\n        [\n            40.7046,\n            -73.7968\n        ],\n        [\n            40.7079,\n            -73.7999\n        ],\n        [\n            40.7111,\n            -73.8031\n        ],\n        [\n            40.7159,\n            -73.8013\n        ],\n        [\n            40.7191,\n            -73.7996\n        ],\n        [\n            40.7217,\n            -73.7978\n        ],\n        [\n            40.7243,\n            -73.7962\n        ],\n        [\n            40.7282,\n            -73.7949\n        ],\n        [\n            40.7320,\n            -73.8062\n        ],\n        [\n            40.7379,\n            -73.8174\n        ],\n        [\n            40.7437,\n            -73.8261\n        ],\n        [\n            40.7478,\n            -73.8302\n        ],\n        [\n            40.7528,\n            -73.8300\n        ],\n        [\n            40.7566,\n            -73.8302\n        ],\n        [\n            40.7590,\n            -73.8300\n        ],\n        [\n            40.7608,\n            -73.8306\n        ],\n        [\n            40.7626,\n            -73.8312\n        ],\n        [\n            40.7654,\n            -73.8318\n        ],\n        [\n            40.7689,\n            -73.8318\n        ],\n        [\n            40.7723,\n            -73.8308\n        ],\n        [\n            40.7750,\n            -73.8290\n        ],\n        [\n            40.7778,\n            -73.8264\n        ],\n        [\n            40.7801,\n            -73.8246\n        ],\n        [\n            40.7836,\n            -73.8247\n        ],\n        [\n            40.7872,\n            -73.8219\n        ],\n        [\n            40.7905,\n            -73.8175\n        ],\n        [\n            40.7937,\n            -73.8169\n        ],\n        [\n            40.7958,\n            -73.8162\n        ],\n        [\n            40.7988,\n            -73.8220\n        ],\n        [\n            40.8017,\n            -73.8279\n        ],\n        [\n            40.8082,\n            -73.8366\n        ],\n        [\n            40.8145,\n            -73.8454\n        ],\n        [\n            40.8194,\n            -73.8357\n        ],\n        [\n            40.8222,\n            -73.8307\n        ],\n        [\n            40.8247,\n            -73.8284\n        ],\n        [\n            40.8292,\n            -73.8455\n        ],\n        [\n            40.8316,\n            -73.8534\n        ],\n        [\n            40.8327,\n            -73.8622\n        ],\n        [\n            40.8341,\n            -73.8755\n        ]\n    ]\n};\n// Street network data for driving/walking routes\nconst streetGrid = {\n    \"Manhattan\": [\n        // Major avenues running north-south\n        [\n            [\n                40.7024,\n                -74.0167\n            ],\n            [\n                40.8155,\n                -73.9478\n            ]\n        ],\n        [\n            [\n                40.7003,\n                -73.9940\n            ],\n            [\n                40.8134,\n                -73.9365\n            ]\n        ],\n        [\n            [\n                40.7024,\n                -73.9908\n            ],\n            [\n                40.8150,\n                -73.9332\n            ]\n        ],\n        [\n            [\n                40.7045,\n                -73.9875\n            ],\n            [\n                40.8168,\n                -73.9300\n            ]\n        ],\n        [\n            [\n                40.7067,\n                -73.9926\n            ],\n            [\n                40.8185,\n                -73.9348\n            ]\n        ],\n        [\n            [\n                40.7088,\n                -73.9978\n            ],\n            [\n                40.8204,\n                -73.9402\n            ]\n        ],\n        [\n            [\n                40.7110,\n                -74.0029\n            ],\n            [\n                40.8222,\n                -73.9453\n            ]\n        ],\n        [\n            [\n                40.7134,\n                -74.0061\n            ],\n            [\n                40.8241,\n                -73.9485\n            ]\n        ],\n        [\n            [\n                40.7155,\n                -74.0111\n            ],\n            [\n                40.8258,\n                -73.9535\n            ]\n        ],\n        [\n            [\n                40.7177,\n                -74.0147\n            ],\n            [\n                40.8277,\n                -73.9571\n            ]\n        ],\n        [\n            [\n                40.7204,\n                -74.0183\n            ],\n            [\n                40.8296,\n                -73.9605\n            ]\n        ],\n        [\n            [\n                40.7222,\n                -74.0219\n            ],\n            [\n                40.8315,\n                -73.9641\n            ]\n        ],\n        [\n            [\n                40.7242,\n                -74.0256\n            ],\n            [\n                40.8333,\n                -73.9679\n            ]\n        ],\n        // Major streets running east-west\n        [\n            [\n                40.7091,\n                -74.0154\n            ],\n            [\n                40.7153,\n                -73.9779\n            ]\n        ],\n        [\n            [\n                40.7266,\n                -74.0090\n            ],\n            [\n                40.7248,\n                -73.9773\n            ]\n        ],\n        [\n            [\n                40.7350,\n                -74.0055\n            ],\n            [\n                40.7328,\n                -73.9758\n            ]\n        ],\n        [\n            [\n                40.7428,\n                -74.0062\n            ],\n            [\n                40.7409,\n                -73.9723\n            ]\n        ],\n        [\n            [\n                40.7506,\n                -74.0057\n            ],\n            [\n                40.7488,\n                -73.9697\n            ]\n        ],\n        [\n            [\n                40.7590,\n                -73.9937\n            ],\n            [\n                40.7543,\n                -73.9624\n            ]\n        ],\n        [\n            [\n                40.7673,\n                -73.9921\n            ],\n            [\n                40.7627,\n                -73.9603\n            ]\n        ],\n        [\n            [\n                40.7689,\n                -73.9820\n            ],\n            [\n                40.7659,\n                -73.9587\n            ]\n        ],\n        [\n            [\n                40.7859,\n                -73.9708\n            ],\n            [\n                40.7828,\n                -73.9487\n            ]\n        ],\n        [\n            [\n                40.7958,\n                -73.9673\n            ],\n            [\n                40.7925,\n                -73.9450\n            ]\n        ],\n        [\n            [\n                40.8043,\n                -73.9646\n            ],\n            [\n                40.8010,\n                -73.9423\n            ]\n        ],\n        [\n            [\n                40.8134,\n                -73.9582\n            ],\n            [\n                40.8094,\n                -73.9322\n            ]\n        ],\n        [\n            [\n                40.8238,\n                -73.9468\n            ],\n            [\n                40.8192,\n                -73.9251\n            ]\n        ]\n    ],\n    \"Queens\": [\n        // Major Queens roads\n        [\n            [\n                40.7420,\n                -73.9595\n            ],\n            [\n                40.7572,\n                -73.9152\n            ]\n        ],\n        [\n            [\n                40.7595,\n                -73.9205\n            ],\n            [\n                40.7501,\n                -73.8685\n            ]\n        ],\n        [\n            [\n                40.7631,\n                -73.8640\n            ],\n            [\n                40.7664,\n                -73.7384\n            ]\n        ],\n        [\n            [\n                40.7386,\n                -73.8784\n            ],\n            [\n                40.7197,\n                -73.8023\n            ]\n        ],\n        [\n            [\n                40.6898,\n                -73.8495\n            ],\n            [\n                40.6720,\n                -73.7662\n            ]\n        ],\n        [\n            [\n                40.7502,\n                -73.9002\n            ],\n            [\n                40.7583,\n                -73.8310\n            ]\n        ],\n        [\n            [\n                40.7635,\n                -73.8618\n            ],\n            [\n                40.7590,\n                -73.8300\n            ]\n        ]\n    ],\n    \"Brooklyn\": [\n        // Major Brooklyn roads\n        [\n            [\n                40.6924,\n                -73.9896\n            ],\n            [\n                40.6576,\n                -73.9490\n            ]\n        ],\n        [\n            [\n                40.6984,\n                -73.9816\n            ],\n            [\n                40.6706,\n                -73.9879\n            ]\n        ],\n        [\n            [\n                40.6887,\n                -73.9909\n            ],\n            [\n                40.6585,\n                -73.9570\n            ]\n        ],\n        [\n            [\n                40.7032,\n                -73.9453\n            ],\n            [\n                40.7098,\n                -73.8970\n            ]\n        ],\n        [\n            [\n                40.6779,\n                -73.9980\n            ],\n            [\n                40.6505,\n                -73.9470\n            ]\n        ]\n    ],\n    \"Bronx\": [\n        // Major Bronx roads\n        [\n            [\n                40.8135,\n                -73.9266\n            ],\n            [\n                40.8704,\n                -73.8846\n            ]\n        ],\n        [\n            [\n                40.8263,\n                -73.9199\n            ],\n            [\n                40.8599,\n                -73.8291\n            ]\n        ],\n        [\n            [\n                40.8281,\n                -73.9254\n            ],\n            [\n                40.8195,\n                -73.8246\n            ]\n        ],\n        [\n            [\n                40.8293,\n                -73.9061\n            ],\n            [\n                40.8453,\n                -73.8289\n            ]\n        ]\n    ]\n};\n// Realistic waypoint generator based on mode of transport\nconst generateRealisticWaypoints = (start, end, mode, line)=>{\n    // For subways, use predefined routes when available\n    if (mode === \"subway\") {\n        // First check if we have the specific line data\n        if (line && subwayRoutes[line]) {\n            const subwayPath = subwayRoutes[line];\n            // Find closest points on the subway line to start and end\n            const startIndex = findClosestPointIndex(subwayPath, start);\n            const endIndex = findClosestPointIndex(subwayPath, end);\n            // Get the appropriate segment of the subway route\n            if (startIndex !== -1 && endIndex !== -1) {\n                let routeSegment;\n                if (startIndex < endIndex) {\n                    routeSegment = subwayPath.slice(startIndex, endIndex + 1);\n                } else {\n                    routeSegment = subwayPath.slice(endIndex, startIndex + 1).reverse();\n                }\n                // If there are very few points, interpolate more\n                if (routeSegment.length < 3) {\n                    return generateCurvedPath(start, end, 20);\n                }\n                // Add walking segments to connect to the actual subway line\n                const result = [];\n                // Add walking segment from start to subway\n                const startSubwayPoint = routeSegment[0];\n                const startWalk = generateWalkingPath(start, startSubwayPoint);\n                result.push(...startWalk.slice(0, -1)); // Don't include the last point as it would be duplicated\n                // Add the subway route\n                result.push(...routeSegment);\n                // Add walking segment from subway to end\n                const endSubwayPoint = routeSegment[routeSegment.length - 1];\n                const endWalk = generateWalkingPath(endSubwayPoint, end);\n                result.push(...endWalk.slice(1)); // Skip the first point as it would be duplicated\n                return result;\n            }\n        }\n        // If no specific line data or couldn't find valid points, create a more subway-like path\n        // This creates a path with few turns but realistic subway curves\n        const distance = calculateDistance(start[0], start[1], end[0], end[1]);\n        // For subway without specific line info, create a curved path with fewer turns\n        const midLat = (start[0] + end[0]) / 2;\n        const midLng = (start[1] + end[1]) / 2;\n        // Create a slight offset for the control point to simulate subway curves\n        const offset = distance * 0.2;\n        const offsetDirection = Math.random() > 0.5 ? 1 : -1;\n        const controlPoint1 = [\n            midLat + offset * offsetDirection * 0.01,\n            midLng + offset * offsetDirection * 0.01\n        ];\n        const points = [];\n        points.push(start);\n        // Generate more points for a smoother curve\n        const numPoints = Math.max(20, Math.floor(distance * 40));\n        for(let i = 1; i < numPoints - 1; i++){\n            const t = i / (numPoints - 1);\n            // Quadratic Bezier formula\n            const lat = Math.pow(1 - t, 2) * start[0] + 2 * (1 - t) * t * controlPoint1[0] + Math.pow(t, 2) * end[0];\n            const lng = Math.pow(1 - t, 2) * start[1] + 2 * (1 - t) * t * controlPoint1[1] + Math.pow(t, 2) * end[1];\n            points.push([\n                lat,\n                lng\n            ]);\n        }\n        points.push(end);\n        return points;\n    }\n    // For buses, use predefined routes when available\n    if (mode === \"bus\") {\n        if (line && busRoutes[line]) {\n            const busPath = busRoutes[line];\n            // Find closest points on the bus line to start and end\n            const startIndex = findClosestPointIndex(busPath, start);\n            const endIndex = findClosestPointIndex(busPath, end);\n            // Get the appropriate segment of the bus route\n            if (startIndex !== -1 && endIndex !== -1) {\n                let routeSegment;\n                if (startIndex < endIndex) {\n                    routeSegment = busPath.slice(startIndex, endIndex + 1);\n                } else {\n                    routeSegment = busPath.slice(endIndex, startIndex + 1).reverse();\n                }\n                // Add walking segments to connect to the actual bus route\n                const result = [];\n                // Add walking segment from start to bus stop\n                const startBusPoint = routeSegment[0];\n                const startWalk = generateWalkingPath(start, startBusPoint);\n                result.push(...startWalk.slice(0, -1)); // Don't include the last point as it would be duplicated\n                // Add the bus route\n                result.push(...routeSegment);\n                // Add walking segment from bus stop to end\n                const endBusPoint = routeSegment[routeSegment.length - 1];\n                const endWalk = generateWalkingPath(endBusPoint, end);\n                result.push(...endWalk.slice(1)); // Skip the first point as it would be duplicated\n                return result;\n            }\n        }\n        // For buses without specific line info, follow the street grid more closely\n        // This will create a more realistic bus route that follows streets\n        return generateStreetPath(start, end, 0.7); // Higher complexity for more zigzags like a bus route\n    }\n    // For walking, create a more realistic path with city blocks\n    if (mode === \"walk\") {\n        return generateWalkingPath(start, end);\n    }\n    // For taxi/uber/car, follow street grid with smoother curves\n    if (mode === \"taxi\" || mode === \"uber\") {\n        return generateDrivingPath(start, end);\n    }\n    // For e-bikes, create a path that's more direct than walking but follows some street patterns\n    if (mode === \"ebike\" || mode === \"bike\") {\n        // E-bikes can take bike lanes and shortcuts\n        const points = [];\n        points.push(start);\n        // Calculate distance to determine complexity\n        const distance = calculateDistance(start[0], start[1], end[0], end[1]);\n        const numSegments = Math.max(3, Math.ceil(distance * 3));\n        // Create a relatively direct path with some turns for bike lanes\n        let currentPoint = start;\n        for(let i = 1; i < numSegments; i++){\n            const progress = i / numSegments;\n            // Bikes can take more direct routes than cars but still follow some street patterns\n            // Mix of grid following and direct path\n            if (i % 2 === 1) {\n                // More direct path\n                const newPoint = [\n                    currentPoint[0] + (end[0] - currentPoint[0]) * 0.5,\n                    currentPoint[1] + (end[1] - currentPoint[1]) * 0.5\n                ];\n                points.push(newPoint);\n                currentPoint = newPoint;\n            } else {\n                // Follow grid\n                const gridPoint = [\n                    currentPoint[0] + (end[0] - start[0]) * (progress + (Math.random() - 0.5) * 0.1),\n                    currentPoint[1] + (end[1] - start[1]) * (progress + (Math.random() - 0.5) * 0.1)\n                ];\n                points.push(gridPoint);\n                currentPoint = gridPoint;\n            }\n        }\n        points.push(end);\n        return points;\n    }\n    // For other modes or fallback, use a curved path\n    const distance = calculateDistance(start[0], start[1], end[0], end[1]);\n    // Significantly increase the number of points for smoother lines\n    const numPoints = Math.max(20, Math.floor(distance * 50));\n    return generateCurvedPath(start, end, numPoints);\n};\n// Helper function to generate paths that follow street patterns with variable complexity\nconst generateStreetPath = (start, end, complexity)=>{\n    const points = [];\n    points.push(start);\n    // Determine how many street segments to create based on distance and complexity\n    const distance = calculateDistance(start[0], start[1], end[0], end[1]);\n    const numSegments = Math.max(2, Math.floor(distance * 5 * complexity));\n    // Create a zigzag path simulating city streets\n    let currentPoint = start;\n    let currentDirection = Math.random() > 0.5 ? \"horizontal\" : \"vertical\";\n    for(let i = 0; i < numSegments; i++){\n        // Calculate progress toward destination\n        const progress = (i + 1) / (numSegments + 1);\n        // Alternate between horizontal and vertical movement\n        let nextPoint;\n        if (currentDirection === \"horizontal\") {\n            // Move horizontally toward target longitude\n            nextPoint = [\n                currentPoint[0],\n                currentPoint[1] + (end[1] - start[1]) * progress * (1 + (Math.random() - 0.5) * 0.4)\n            ];\n            currentDirection = \"vertical\";\n        } else {\n            // Move vertically toward target latitude\n            nextPoint = [\n                currentPoint[0] + (end[0] - start[0]) * progress * (1 + (Math.random() - 0.5) * 0.4),\n                currentPoint[1]\n            ];\n            currentDirection = \"horizontal\";\n        }\n        // Add several points between current and next for smooth lines\n        const segmentPoints = 10;\n        for(let j = 1; j < segmentPoints; j++){\n            const t = j / segmentPoints;\n            points.push([\n                currentPoint[0] + (nextPoint[0] - currentPoint[0]) * t,\n                currentPoint[1] + (nextPoint[1] - currentPoint[1]) * t\n            ]);\n        }\n        points.push(nextPoint);\n        currentPoint = nextPoint;\n    }\n    // Add more points between the last turn and the end\n    const finalSegmentPoints = 10;\n    for(let j = 1; j < finalSegmentPoints; j++){\n        const t = j / finalSegmentPoints;\n        points.push([\n            currentPoint[0] + (end[0] - currentPoint[0]) * t,\n            currentPoint[1] + (end[1] - currentPoint[1]) * t\n        ]);\n    }\n    points.push(end);\n    return points;\n};\n// Find the closest point on a route to a given coordinate\nconst findClosestPointIndex = (route, point)=>{\n    let minDistance = Infinity;\n    let closestIndex = -1;\n    route.forEach((routePoint, index)=>{\n        const distance = calculateDistance(routePoint[0], routePoint[1], point[0], point[1]);\n        if (distance < minDistance) {\n            minDistance = distance;\n            closestIndex = index;\n        }\n    });\n    return closestIndex;\n};\n// Calculate distance between points in km using Haversine formula\nconst calculateDistance = (lat1, lon1, lat2, lon2)=>{\n    const R = 6371; // Earth radius in km\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLon = (lon2 - lon1) * Math.PI / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n};\n// Generate a realistic walking path following the street grid\nconst generateWalkingPath = (start, end)=>{\n    // Create a path that follows streets more realistically\n    const points = [];\n    points.push(start);\n    // Determine which borough the route is in\n    const boroughKeys = Object.keys(streetGrid);\n    let routeBorough = \"Manhattan\"; // Default\n    // Try to determine the borough based on start coordinates\n    const avgLat = (start[0] + end[0]) / 2;\n    const avgLng = (start[1] + end[1]) / 2;\n    if (avgLat > 40.77 && avgLng > -74.02 && avgLng < -73.91) {\n        routeBorough = \"Manhattan\";\n    } else if (avgLat > 40.65 && avgLng > -73.96 && avgLng < -73.7) {\n        routeBorough = \"Queens\";\n    } else if (avgLat < 40.71 && avgLng > -74.04 && avgLng < -73.83) {\n        routeBorough = \"Brooklyn\";\n    } else if (avgLat > 40.79 && avgLng > -73.94 && avgLng < -73.82) {\n        routeBorough = \"Bronx\";\n    }\n    const streets = streetGrid[routeBorough] || streetGrid[\"Manhattan\"];\n    // Find nearest streets to start and end points\n    const findNearestStreet = (point)=>{\n        let nearestDistance = Infinity;\n        let nearestStreet = streets[0];\n        for (const street of streets){\n            const streetStart = street[0];\n            const streetEnd = street[1];\n            // Calculate distance to street (simplified)\n            const d1 = calculateDistance(point[0], point[1], streetStart[0], streetStart[1]);\n            const d2 = calculateDistance(point[0], point[1], streetEnd[0], streetEnd[1]);\n            const minDist = Math.min(d1, d2);\n            if (minDist < nearestDistance) {\n                nearestDistance = minDist;\n                nearestStreet = street;\n            }\n        }\n        return nearestStreet;\n    };\n    const startStreet = findNearestStreet(start);\n    const endStreet = findNearestStreet(end);\n    // Create path: start -> nearest point on start street -> nearest point on end street -> end\n    // Add intermediate points for the first street segment\n    const startStreetVector = [\n        startStreet[1][0] - startStreet[0][0],\n        startStreet[1][1] - startStreet[0][1]\n    ];\n    const startStreetLength = Math.sqrt(startStreetVector[0] * startStreetVector[0] + startStreetVector[1] * startStreetVector[1]);\n    const startStreetNormalized = [\n        startStreetVector[0] / startStreetLength,\n        startStreetVector[1] / startStreetLength\n    ];\n    // Project start point onto start street\n    const startDotProduct = (start[0] - startStreet[0][0]) * startStreetNormalized[0] + (start[1] - startStreet[0][1]) * startStreetNormalized[1];\n    const startProjection = [\n        startStreet[0][0] + startDotProduct * startStreetNormalized[0],\n        startStreet[0][1] + startDotProduct * startStreetNormalized[1]\n    ];\n    // Add points from start to the nearest point on the start street\n    const numSteps1 = 5;\n    for(let i = 1; i <= numSteps1; i++){\n        const t = i / numSteps1;\n        points.push([\n            start[0] + (startProjection[0] - start[0]) * t,\n            start[1] + (startProjection[1] - start[1]) * t\n        ]);\n    }\n    // Add points along the street\n    const endStreetVector = [\n        endStreet[1][0] - endStreet[0][0],\n        endStreet[1][1] - endStreet[0][1]\n    ];\n    const endStreetLength = Math.sqrt(endStreetVector[0] * endStreetVector[0] + endStreetVector[1] * endStreetVector[1]);\n    const endStreetNormalized = [\n        endStreetVector[0] / endStreetLength,\n        endStreetVector[1] / endStreetLength\n    ];\n    // Project end point onto end street\n    const endDotProduct = (end[0] - endStreet[0][0]) * endStreetNormalized[0] + (end[1] - endStreet[0][1]) * endStreetNormalized[1];\n    const endProjection = [\n        endStreet[0][0] + endDotProduct * endStreetNormalized[0],\n        endStreet[0][1] + endDotProduct * endStreetNormalized[1]\n    ];\n    // If the streets are different, create a path between the projections\n    if (startStreet !== endStreet) {\n        // Add points along the connecting path\n        const numSteps2 = 10;\n        for(let i = 1; i <= numSteps2; i++){\n            const t = i / numSteps2;\n            points.push([\n                startProjection[0] + (endProjection[0] - startProjection[0]) * t,\n                startProjection[1] + (endProjection[1] - startProjection[1]) * t\n            ]);\n        }\n    }\n    // Add points from the nearest point on the end street to the end\n    const numSteps3 = 5;\n    for(let i = 1; i <= numSteps3; i++){\n        const t = i / numSteps3;\n        points.push([\n            endProjection[0] + (end[0] - endProjection[0]) * t,\n            endProjection[1] + (end[1] - endProjection[1]) * t\n        ]);\n    }\n    points.push(end);\n    return points;\n};\n// Generate a realistic driving path following the street grid\nconst generateDrivingPath = (start, end)=>{\n    // For driving, use a similar approach to walking but with more points and smoother turns\n    // This will create a path that follows the street grid more realistically\n    return generateWalkingPath(start, end);\n};\n// Generate a smooth curved path between two points using quadratic Bezier curve\nconst generateCurvedPath = (start, end, numPoints)=>{\n    // Increase the minimum number of points for smoother curves\n    numPoints = Math.max(20, numPoints); // Ensure at least 20 points\n    const points = [];\n    // Add start point\n    points.push(start);\n    // Calculate control point (perpendicular to midpoint)\n    const midLat = (start[0] + end[0]) / 2;\n    const midLng = (start[1] + end[1]) / 2;\n    // Create perpendicular offset for control point (creates a curve)\n    const dx = end[1] - start[1];\n    const dy = end[0] - start[0];\n    const length = Math.sqrt(dx * dx + dy * dy);\n    const offsetFactor = 0.3; // Controls curve amount\n    const controlPoint = [\n        midLat + offsetFactor * dx / length,\n        midLng - offsetFactor * dy / length\n    ];\n    // Generate more points along the quadratic Bezier curve\n    for(let i = 1; i < numPoints - 1; i++){\n        const t = i / (numPoints - 1);\n        // Quadratic Bezier formula\n        const lat = Math.pow(1 - t, 2) * start[0] + 2 * (1 - t) * t * controlPoint[0] + Math.pow(t, 2) * end[0];\n        const lng = Math.pow(1 - t, 2) * start[1] + 2 * (1 - t) * t * controlPoint[1] + Math.pow(t, 2) * end[1];\n        points.push([\n            lat,\n            lng\n        ]);\n    }\n    // Add end point\n    points.push(end);\n    return points;\n};\n// Generate a random location within NYC boundaries\nconst generateRandomNYCLocation = ()=>{\n    // NYC boundaries (approximate)\n    const nycBounds = {\n        north: 40.915,\n        south: 40.495,\n        east: -73.700,\n        west: -74.255 // Staten Island\n    };\n    // Generate a random point within Manhattan for more realistic locations\n    const manhattanBounds = {\n        north: 40.880,\n        south: 40.700,\n        east: -73.920,\n        west: -74.020 // West side\n    };\n    // 80% chance to be in Manhattan for more central locations\n    if (Math.random() < 0.8) {\n        return [\n            manhattanBounds.south + Math.random() * (manhattanBounds.north - manhattanBounds.south),\n            manhattanBounds.west + Math.random() * (manhattanBounds.east - manhattanBounds.west)\n        ];\n    }\n    // 20% chance to be elsewhere in NYC\n    return [\n        nycBounds.south + Math.random() * (nycBounds.north - nycBounds.south),\n        nycBounds.west + Math.random() * (nycBounds.east - nycBounds.west)\n    ];\n};\n// Default NYC location (Times Square)\nconst defaultLocation = [\n    40.7580,\n    -73.9855\n];\nconst Map = ({ origin, destination, segments })=>{\n    const [startCoords, setStartCoords] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [endCoords, setEndCoords] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [waypoints, setWaypoints] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    // Mock coordinates for NYC boroughs (in a real app, would use geocoding API)\n    const mockCoordinates = {\n        \"Manhattan\": [\n            40.7831,\n            -73.9712\n        ],\n        \"Brooklyn\": [\n            40.6782,\n            -73.9442\n        ],\n        \"Queens\": [\n            40.7282,\n            -73.7949\n        ],\n        \"Bronx\": [\n            40.8448,\n            -73.8648\n        ],\n        \"Staten Island\": [\n            40.5795,\n            -74.1502\n        ],\n        \"Times Square\": [\n            40.7580,\n            -73.9855\n        ],\n        \"Central Park\": [\n            40.7829,\n            -73.9654\n        ],\n        \"Prospect Park\": [\n            40.6602,\n            -73.9690\n        ],\n        \"Flushing Meadows\": [\n            40.7466,\n            -73.8422\n        ],\n        \"Flushing\": [\n            40.7654,\n            -73.8318\n        ],\n        \"Bayside\": [\n            40.7612,\n            -73.7716\n        ],\n        \"Main St\": [\n            40.7590,\n            -73.8300\n        ],\n        \"Yankee Stadium\": [\n            40.8296,\n            -73.9262\n        ],\n        \"Coney Island\": [\n            40.5755,\n            -73.9707\n        ],\n        \"JFK Airport\": [\n            40.6413,\n            -73.7781\n        ],\n        \"LaGuardia Airport\": [\n            40.7769,\n            -73.8740\n        ],\n        \"World Trade Center\": [\n            40.7127,\n            -74.0134\n        ],\n        \"Empire State Building\": [\n            40.7484,\n            -73.9857\n        ],\n        \"Barclays Center\": [\n            40.6826,\n            -73.9754\n        ],\n        \"Columbia University\": [\n            40.8075,\n            -73.9626\n        ],\n        \"NYU\": [\n            40.7295,\n            -73.9965\n        ],\n        \"Penn Station, New York, NY 10119\": [\n            40.7497,\n            -73.9939\n        ]\n    };\n    // Get coordinates from location string or use mock data\n    const getCoordinates = (location)=>{\n        if (!location) {\n            console.warn(\"Location is undefined or null\");\n            return mockCoordinates[\"Times Square\"]; // Return a default location like Times Square\n        }\n        // Normalize the location string\n        const normalizedLocation = location.toLowerCase();\n        // Try to match with known locations first\n        for (const [locationName, coords] of Object.entries(mockCoordinates)){\n            if (normalizedLocation.includes(locationName.toLowerCase())) {\n                return coords;\n            }\n        }\n        // Check for specific NYC neighborhoods\n        if (normalizedLocation.includes(\"manhattan\")) {\n            return mockCoordinates.Manhattan;\n        } else if (normalizedLocation.includes(\"brooklyn\")) {\n            return mockCoordinates.Brooklyn;\n        } else if (normalizedLocation.includes(\"queens\")) {\n            return mockCoordinates.Queens;\n        } else if (normalizedLocation.includes(\"bronx\")) {\n            return mockCoordinates.Bronx;\n        } else if (normalizedLocation.includes(\"staten island\")) {\n            return mockCoordinates.StatenIsland;\n        }\n        // If still not found, generate a random location near the center of NYC\n        console.warn(\"Location not found, using a generated coordinate:\", location);\n        return generateRandomNYCLocation();\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Fix Leaflet icons\n        fixLeafletIcon();\n        // Set start and end coordinates\n        if (origin && destination) {\n            const fromCoords = getCoordinates(origin);\n            const toCoords = getCoordinates(destination);\n            // Log coordinates for debugging\n            console.log(`Map - From location: \"${origin}\" → coordinates: [${fromCoords[0]}, ${fromCoords[1]}]`);\n            console.log(`Map - To location: \"${destination}\" → coordinates: [${toCoords[0]}, ${toCoords[1]}]`);\n            setStartCoords(fromCoords);\n            setEndCoords(toCoords);\n            // Generate realistic waypoints for each segment\n            if (segments && segments.length > 0) {\n                const segmentWaypoints = {};\n                let lastEndpoint = fromCoords;\n                segments.forEach((segment, index)=>{\n                    const endpointCoords = index === segments.length - 1 ? toCoords : getCoordinates(segment.endLocation || segment.to);\n                    // Generate realistic waypoints based on mode of transport\n                    let segmentLine = segment.line || \"\";\n                    // Extract line number from text like \"7 Train\" or \"Q44 Bus\"\n                    if (segment.lineInfo) {\n                        const lineMatch = segment.lineInfo.match(/^([A-Z0-9]+)/i);\n                        if (lineMatch) segmentLine = lineMatch[1];\n                    }\n                    const segmentPoints = generateRealisticWaypoints(lastEndpoint, endpointCoords, segment.mode, segmentLine);\n                    segmentWaypoints[`segment-${index}`] = segmentPoints;\n                    lastEndpoint = endpointCoords;\n                });\n                setWaypoints(segmentWaypoints);\n            }\n        }\n    }, [\n        origin,\n        destination,\n        segments\n    ]);\n    if (!startCoords || !endCoords) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"h-full w-full flex items-center justify-center bg-gray-100\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                className: \"text-gray-500\",\n                children: \"Loading map...\"\n            }, void 0, false, {\n                fileName: \"/Users/charlie/Documents/code/NYC-Beeline/src/components/Map.tsx\",\n                lineNumber: 963,\n                columnNumber: 9\n            }, undefined)\n        }, void 0, false, {\n            fileName: \"/Users/charlie/Documents/code/NYC-Beeline/src/components/Map.tsx\",\n            lineNumber: 962,\n            columnNumber: 7\n        }, undefined);\n    }\n    // Calculate map center and bounds\n    const calculateCenter = ()=>{\n        return [\n            (startCoords[0] + endCoords[0]) / 2,\n            (startCoords[1] + endCoords[1]) / 2\n        ];\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_leaflet__WEBPACK_IMPORTED_MODULE_2__.MapContainer, {\n        center: calculateCenter(),\n        zoom: 12,\n        style: {\n            height: \"100%\",\n            width: \"100%\"\n        },\n        attributionControl: false,\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_leaflet__WEBPACK_IMPORTED_MODULE_2__.TileLayer, {\n                url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n                attribution: '\\xa9 <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            }, void 0, false, {\n                fileName: \"/Users/charlie/Documents/code/NYC-Beeline/src/components/Map.tsx\",\n                lineNumber: 983,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_leaflet__WEBPACK_IMPORTED_MODULE_2__.Marker, {\n                position: startCoords,\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_leaflet__WEBPACK_IMPORTED_MODULE_2__.Popup, {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                            children: \"Start:\"\n                        }, void 0, false, {\n                            fileName: \"/Users/charlie/Documents/code/NYC-Beeline/src/components/Map.tsx\",\n                            lineNumber: 991,\n                            columnNumber: 11\n                        }, undefined),\n                        \" \",\n                        origin\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/charlie/Documents/code/NYC-Beeline/src/components/Map.tsx\",\n                    lineNumber: 990,\n                    columnNumber: 9\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/charlie/Documents/code/NYC-Beeline/src/components/Map.tsx\",\n                lineNumber: 989,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_leaflet__WEBPACK_IMPORTED_MODULE_2__.Marker, {\n                position: endCoords,\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_leaflet__WEBPACK_IMPORTED_MODULE_2__.Popup, {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                            children: \"Destination:\"\n                        }, void 0, false, {\n                            fileName: \"/Users/charlie/Documents/code/NYC-Beeline/src/components/Map.tsx\",\n                            lineNumber: 998,\n                            columnNumber: 11\n                        }, undefined),\n                        \" \",\n                        destination\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/charlie/Documents/code/NYC-Beeline/src/components/Map.tsx\",\n                    lineNumber: 997,\n                    columnNumber: 9\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/charlie/Documents/code/NYC-Beeline/src/components/Map.tsx\",\n                lineNumber: 996,\n                columnNumber: 7\n            }, undefined),\n            segments && segments.length > 0 && segments.map((segment, index)=>{\n                const segmentPoints = waypoints[`segment-${index}`];\n                if (!segmentPoints) return null;\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_leaflet__WEBPACK_IMPORTED_MODULE_2__.Polyline, {\n                            positions: segmentPoints,\n                            color: getRouteColor(segment.mode),\n                            weight: segment.mode === \"walk\" ? 3 : segment.mode === \"subway\" ? 5 : 4,\n                            dashArray: segment.mode === \"walk\" ? \"5, 5\" : segment.mode === \"bus\" ? \"1, 10\" : \"\",\n                            smoothFactor: segment.mode === \"subway\" ? 0.5 : 1,\n                            lineJoin: \"round\",\n                            lineCap: \"round\",\n                            opacity: segment.mode === \"subway\" ? 0.9 : 0.85,\n                            className: `route-line route-line-${segment.mode}`\n                        }, void 0, false, {\n                            fileName: \"/Users/charlie/Documents/code/NYC-Beeline/src/components/Map.tsx\",\n                            lineNumber: 1010,\n                            columnNumber: 13\n                        }, undefined),\n                        segmentPoints.slice(1, -1).filter((_, i, arr)=>{\n                            const showEvery = Math.max(1, Math.floor(arr.length / (segment.mode === \"subway\" ? 4 : 8)));\n                            return i % showEvery === 0;\n                        }).map((point, pointIndex)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_leaflet__WEBPACK_IMPORTED_MODULE_2__.Marker, {\n                                position: point,\n                                icon: getTransportIcon(segment.mode),\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_leaflet__WEBPACK_IMPORTED_MODULE_2__.Popup, {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: segment.mode.charAt(0).toUpperCase() + segment.mode.slice(1)\n                                        }, void 0, false, {\n                                            fileName: \"/Users/charlie/Documents/code/NYC-Beeline/src/components/Map.tsx\",\n                                            lineNumber: 1036,\n                                            columnNumber: 21\n                                        }, undefined),\n                                        segment.lineInfo && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"small\", {\n                                                children: segment.lineInfo\n                                            }, void 0, false, {\n                                                fileName: \"/Users/charlie/Documents/code/NYC-Beeline/src/components/Map.tsx\",\n                                                lineNumber: 1037,\n                                                columnNumber: 47\n                                            }, undefined)\n                                        }, void 0, false, {\n                                            fileName: \"/Users/charlie/Documents/code/NYC-Beeline/src/components/Map.tsx\",\n                                            lineNumber: 1037,\n                                            columnNumber: 42\n                                        }, undefined),\n                                        segment.line && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"small\", {\n                                                children: segment.line\n                                            }, void 0, false, {\n                                                fileName: \"/Users/charlie/Documents/code/NYC-Beeline/src/components/Map.tsx\",\n                                                lineNumber: 1038,\n                                                columnNumber: 43\n                                            }, undefined)\n                                        }, void 0, false, {\n                                            fileName: \"/Users/charlie/Documents/code/NYC-Beeline/src/components/Map.tsx\",\n                                            lineNumber: 1038,\n                                            columnNumber: 38\n                                        }, undefined)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/charlie/Documents/code/NYC-Beeline/src/components/Map.tsx\",\n                                    lineNumber: 1035,\n                                    columnNumber: 19\n                                }, undefined)\n                            }, `waypoint-${index}-${pointIndex}`, false, {\n                                fileName: \"/Users/charlie/Documents/code/NYC-Beeline/src/components/Map.tsx\",\n                                lineNumber: 1030,\n                                columnNumber: 17\n                            }, undefined))\n                    ]\n                }, `route-segment-${index}`, true, {\n                    fileName: \"/Users/charlie/Documents/code/NYC-Beeline/src/components/Map.tsx\",\n                    lineNumber: 1009,\n                    columnNumber: 11\n                }, undefined);\n            })\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/charlie/Documents/code/NYC-Beeline/src/components/Map.tsx\",\n        lineNumber: 977,\n        columnNumber: 5\n    }, undefined);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Map);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/Map.tsx\n");

/***/ })

};
;