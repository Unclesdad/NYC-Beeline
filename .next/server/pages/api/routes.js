"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/routes";
exports.ids = ["pages/api/routes"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Froutes&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Froutes.ts&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Froutes&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Froutes.ts&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_routes_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/pages/api/routes.ts */ \"(api)/./src/pages/api/routes.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_routes_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_routes_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/routes\",\n        pathname: \"/api/routes\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _src_pages_api_routes_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnJvdXRlcyZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnNyYyUyRnBhZ2VzJTJGYXBpJTJGcm91dGVzLnRzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQ3NEO0FBQ3REO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyxxREFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMscURBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWJlZWxpbmUvPzUwODkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3NyYy9wYWdlcy9hcGkvcm91dGVzLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvcm91dGVzXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvcm91dGVzXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Froutes&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Froutes.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   transitAPI: () => (/* binding */ transitAPI)\n/* harmony export */ });\n// API configuration\nconst API_CONFIG = {\n    MTA_BASE_URL: \"https://api.mta.info/api\",\n    CITIBIKE_BASE_URL: \"https://gbfs.citibikenyc.com/gbfs/en\",\n    UBER_BASE_URL: \"https://api.uber.com/v1\",\n    GOOGLE_MAPS_BASE_URL: \"https://maps.googleapis.com/maps/api\"\n};\n// Mock data (in a real app, these would be API calls)\nconst mockSubwayData = [\n    {\n        line: \"A\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"medium\"\n    },\n    {\n        line: \"C\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"low\"\n    },\n    {\n        line: \"E\",\n        status: \"delayed\",\n        delay: 10,\n        crowd_level: \"high\"\n    },\n    {\n        line: \"B\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"medium\"\n    },\n    {\n        line: \"D\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"medium\"\n    },\n    {\n        line: \"F\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"medium\"\n    },\n    {\n        line: \"M\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"low\"\n    },\n    {\n        line: \"G\",\n        status: \"delayed\",\n        delay: 5,\n        crowd_level: \"low\"\n    },\n    {\n        line: \"L\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"high\"\n    },\n    {\n        line: \"N\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"medium\"\n    },\n    {\n        line: \"Q\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"medium\"\n    },\n    {\n        line: \"R\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"low\"\n    },\n    {\n        line: \"W\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"low\"\n    },\n    {\n        line: \"1\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"medium\"\n    },\n    {\n        line: \"2\",\n        status: \"delayed\",\n        delay: 8,\n        crowd_level: \"high\"\n    },\n    {\n        line: \"3\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"medium\"\n    },\n    {\n        line: \"4\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"high\"\n    },\n    {\n        line: \"5\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"medium\"\n    },\n    {\n        line: \"6\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"high\"\n    },\n    {\n        line: \"7\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"medium\"\n    },\n    {\n        line: \"J\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"low\"\n    },\n    {\n        line: \"Z\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"low\"\n    },\n    {\n        line: \"S\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"low\"\n    }\n];\nconst mockBusRoutes = [\n    \"Q58\",\n    \"Q59\",\n    \"Q60\",\n    \"B41\",\n    \"B42\",\n    \"B44\",\n    \"B45\",\n    \"B46\",\n    \"M1\",\n    \"M2\",\n    \"M3\",\n    \"M4\",\n    \"M5\",\n    \"BX1\",\n    \"BX2\",\n    \"BX9\",\n    \"BX10\",\n    \"S40\",\n    \"S44\",\n    \"S46\",\n    \"S48\"\n];\nconst generateMockBusData = ()=>{\n    return mockBusRoutes.map((route)=>({\n            route,\n            location: {\n                lat: 40.7128 + (Math.random() - 0.5) * 0.2,\n                lng: -74.0060 + (Math.random() - 0.5) * 0.2\n            },\n            next_stop: `${route} Stop ${Math.floor(Math.random() * 20) + 1}`,\n            estimated_arrival: new Date(Date.now() + Math.floor(Math.random() * 20) * 60000).toISOString(),\n            crowd_level: [\n                \"low\",\n                \"medium\",\n                \"high\"\n            ][Math.floor(Math.random() * 3)]\n        }));\n};\n// API service functions\nclass TransitAPI {\n    // Subway data\n    async getSubwayStatus() {\n        // In a real app, this would be an API call to MTA\n        // return axios.get(`${API_CONFIG.MTA_BASE_URL}/subway/status`).then(res => res.data);\n        // Using mock data for now\n        return Promise.resolve(mockSubwayData);\n    }\n    async getSubwayLine(line) {\n        // In a real app, this would be an API call to MTA\n        // return axios.get(`${API_CONFIG.MTA_BASE_URL}/subway/line/${line}`).then(res => res.data);\n        // Using mock data for now\n        const lineData = mockSubwayData.find((subway)=>subway.line === line);\n        return Promise.resolve(lineData || null);\n    }\n    // Bus data\n    async getBusRoutes(borough) {\n        // In a real app, this would be an API call\n        // return axios.get(`${API_CONFIG.MTA_BASE_URL}/bus/routes?borough=${borough}`).then(res => res.data);\n        // Using mock data filtered by borough prefix\n        const boroughPrefix = borough.charAt(0).toUpperCase();\n        const routes = mockBusRoutes.filter((route)=>route.startsWith(boroughPrefix));\n        return Promise.resolve(routes);\n    }\n    async getBusLocations(route) {\n        // In a real app, this would be an API call\n        // return axios.get(`${API_CONFIG.MTA_BASE_URL}/bus/route/${route}/locations`).then(res => res.data);\n        // Using mock data\n        const busData = generateMockBusData().filter((bus)=>bus.route === route);\n        return Promise.resolve(busData);\n    }\n    // Bike data\n    async getBikeStations(lat, lng, radius = 1) {\n        // In a real app, this would be an API call to Citi Bike\n        // return axios.get(`${API_CONFIG.CITIBIKE_BASE_URL}/station_information.json`).then(res => res.data.data.stations);\n        // Generate mock bike stations around the provided coordinates\n        const stations = [];\n        const stationCount = Math.floor(Math.random() * 5) + 3; // 3-7 stations\n        for(let i = 0; i < stationCount; i++){\n            const stationLat = lat + (Math.random() - 0.5) * 0.02 * radius;\n            const stationLng = lng + (Math.random() - 0.5) * 0.02 * radius;\n            stations.push({\n                station_id: `station-${i}`,\n                name: `Bike Station ${i + 1}`,\n                location: {\n                    lat: stationLat,\n                    lng: stationLng\n                },\n                available_bikes: Math.floor(Math.random() * 15),\n                available_docks: Math.floor(Math.random() * 10)\n            });\n        }\n        return Promise.resolve(stations);\n    }\n    // Uber/Taxi data\n    async getUberEstimate(startLat, startLng, endLat, endLng) {\n        // In a real app, this would be an API call to Uber\n        // return axios.get(`${API_CONFIG.UBER_BASE_URL}/estimates/price?start_latitude=${startLat}&start_longitude=${startLng}&end_latitude=${endLat}&end_longitude=${endLng}`).then(res => res.data.prices);\n        // Generate mock Uber options\n        const options = [\n            {\n                product_id: \"uberx\",\n                display_name: \"UberX\"\n            },\n            {\n                product_id: \"uberxl\",\n                display_name: \"UberXL\"\n            },\n            {\n                product_id: \"uberblack\",\n                display_name: \"Uber Black\"\n            },\n            {\n                product_id: \"uberpool\",\n                display_name: \"Uber Pool\"\n            }\n        ];\n        // Calculate mock duration and fare based on distance\n        const distance = this.calculateDistance(startLat, startLng, endLat, endLng);\n        return Promise.resolve(options.map((option)=>({\n                ...option,\n                estimate: {\n                    duration: Math.floor(distance * 120),\n                    fare: Math.floor((option.product_id === \"uberpool\" ? 2.0 : 2.5) * distance * 100) / 100\n                }\n            })));\n    }\n    async getTaxiEstimate(startLat, startLng, endLat, endLng) {\n        // In a real app, this would be an API call or calculation\n        // return axios.get(`${API_CONFIG.TAXI_BASE_URL}/estimate?start_latitude=${startLat}&start_longitude=${startLng}&end_latitude=${endLat}&end_longitude=${endLng}`).then(res => res.data.fare);\n        // Calculate mock taxi fare based on distance\n        const distance = this.calculateDistance(startLat, startLng, endLat, endLng);\n        const baseFare = 2.50;\n        const perMileFare = 2.50;\n        return Promise.resolve(Math.floor((baseFare + distance * perMileFare) * 100) / 100);\n    }\n    // Helper functions\n    calculateDistance(lat1, lng1, lat2, lng2) {\n        const R = 3958.8; // Earth radius in miles\n        const dLat = this.toRadians(lat2 - lat1);\n        const dLng = this.toRadians(lng2 - lng1);\n        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        const distance = R * c;\n        return distance;\n    }\n    toRadians(degrees) {\n        return degrees * Math.PI / 180;\n    }\n}\n// Export a singleton instance\nconst transitAPI = new TransitAPI();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU8sS0FBSzlELEtBQUtrRSxHQUFHLENBQUNKLE9BQU8sS0FDckM5RCxLQUFLbUUsR0FBRyxDQUFDLElBQUksQ0FBQ0osU0FBUyxDQUFDTixTQUFTekQsS0FBS21FLEdBQUcsQ0FBQyxJQUFJLENBQUNKLFNBQVMsQ0FBQ0osU0FDekQzRCxLQUFLa0UsR0FBRyxDQUFDRixPQUFPLEtBQUtoRSxLQUFLa0UsR0FBRyxDQUFDRixPQUFPO1FBQ3ZDLE1BQU1JLElBQUksSUFBSXBFLEtBQUtxRSxLQUFLLENBQUNyRSxLQUFLc0UsSUFBSSxDQUFDTCxJQUFJakUsS0FBS3NFLElBQUksQ0FBQyxJQUFJTDtRQUNyRCxNQUFNakIsV0FBV2EsSUFBSU87UUFFckIsT0FBT3BCO0lBQ1Q7SUFFUWUsVUFBVVEsT0FBZSxFQUFVO1FBQ3pDLE9BQU9BLFVBQVV2RSxLQUFLd0UsRUFBRSxHQUFHO0lBQzdCO0FBQ0Y7QUFFQSw4QkFBOEI7QUFDdkIsTUFBTUMsYUFBYSxJQUFJaEUsYUFBYSIsInNvdXJjZXMiOlsid2VicGFjazovL255Yy1iZWVsaW5lLy4vc3JjL2xpYi9hcGkudHM/MmZhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuXG4vLyBBUEkgY29uZmlndXJhdGlvblxuY29uc3QgQVBJX0NPTkZJRyA9IHtcbiAgTVRBX0JBU0VfVVJMOiAnaHR0cHM6Ly9hcGkubXRhLmluZm8vYXBpJyxcbiAgQ0lUSUJJS0VfQkFTRV9VUkw6ICdodHRwczovL2diZnMuY2l0aWJpa2VueWMuY29tL2diZnMvZW4nLFxuICBVQkVSX0JBU0VfVVJMOiAnaHR0cHM6Ly9hcGkudWJlci5jb20vdjEnLFxuICBHT09HTEVfTUFQU19CQVNFX1VSTDogJ2h0dHBzOi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaScsXG59O1xuXG4vLyBUcmFuc2l0IGRhdGEgaW50ZXJmYWNlc1xuZXhwb3J0IGludGVyZmFjZSBTdWJ3YXlEYXRhIHtcbiAgbGluZTogc3RyaW5nO1xuICBzdGF0dXM6IHN0cmluZztcbiAgZGVsYXk6IG51bWJlcjsgLy8gaW4gbWludXRlc1xuICBjcm93ZF9sZXZlbDogJ2xvdycgfCAnbWVkaXVtJyB8ICdoaWdoJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCdXNEYXRhIHtcbiAgcm91dGU6IHN0cmluZztcbiAgbG9jYXRpb246IHtcbiAgICBsYXQ6IG51bWJlcjtcbiAgICBsbmc6IG51bWJlcjtcbiAgfTtcbiAgbmV4dF9zdG9wOiBzdHJpbmc7XG4gIGVzdGltYXRlZF9hcnJpdmFsOiBzdHJpbmc7XG4gIGNyb3dkX2xldmVsOiAnbG93JyB8ICdtZWRpdW0nIHwgJ2hpZ2gnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJpa2VEYXRhIHtcbiAgc3RhdGlvbl9pZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGxvY2F0aW9uOiB7XG4gICAgbGF0OiBudW1iZXI7XG4gICAgbG5nOiBudW1iZXI7XG4gIH07XG4gIGF2YWlsYWJsZV9iaWtlczogbnVtYmVyO1xuICBhdmFpbGFibGVfZG9ja3M6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVYmVyRGF0YSB7XG4gIHByb2R1Y3RfaWQ6IHN0cmluZztcbiAgZGlzcGxheV9uYW1lOiBzdHJpbmc7XG4gIGVzdGltYXRlOiB7XG4gICAgZHVyYXRpb246IG51bWJlcjsgLy8gaW4gc2Vjb25kc1xuICAgIGZhcmU6IG51bWJlcjsgLy8gaW4gZG9sbGFyc1xuICB9O1xufVxuXG4vLyBNb2NrIGRhdGEgKGluIGEgcmVhbCBhcHAsIHRoZXNlIHdvdWxkIGJlIEFQSSBjYWxscylcbmNvbnN0IG1vY2tTdWJ3YXlEYXRhOiBTdWJ3YXlEYXRhW10gPSBbXG4gIHsgbGluZTogJ0EnLCBzdGF0dXM6ICdub3JtYWwnLCBkZWxheTogMCwgY3Jvd2RfbGV2ZWw6ICdtZWRpdW0nIH0sXG4gIHsgbGluZTogJ0MnLCBzdGF0dXM6ICdub3JtYWwnLCBkZWxheTogMCwgY3Jvd2RfbGV2ZWw6ICdsb3cnIH0sXG4gIHsgbGluZTogJ0UnLCBzdGF0dXM6ICdkZWxheWVkJywgZGVsYXk6IDEwLCBjcm93ZF9sZXZlbDogJ2hpZ2gnIH0sXG4gIHsgbGluZTogJ0InLCBzdGF0dXM6ICdub3JtYWwnLCBkZWxheTogMCwgY3Jvd2RfbGV2ZWw6ICdtZWRpdW0nIH0sXG4gIHsgbGluZTogJ0QnLCBzdGF0dXM6ICdub3JtYWwnLCBkZWxheTogMCwgY3Jvd2RfbGV2ZWw6ICdtZWRpdW0nIH0sXG4gIHsgbGluZTogJ0YnLCBzdGF0dXM6ICdub3JtYWwnLCBkZWxheTogMCwgY3Jvd2RfbGV2ZWw6ICdtZWRpdW0nIH0sXG4gIHsgbGluZTogJ00nLCBzdGF0dXM6ICdub3JtYWwnLCBkZWxheTogMCwgY3Jvd2RfbGV2ZWw6ICdsb3cnIH0sXG4gIHsgbGluZTogJ0cnLCBzdGF0dXM6ICdkZWxheWVkJywgZGVsYXk6IDUsIGNyb3dkX2xldmVsOiAnbG93JyB9LFxuICB7IGxpbmU6ICdMJywgc3RhdHVzOiAnbm9ybWFsJywgZGVsYXk6IDAsIGNyb3dkX2xldmVsOiAnaGlnaCcgfSxcbiAgeyBsaW5lOiAnTicsIHN0YXR1czogJ25vcm1hbCcsIGRlbGF5OiAwLCBjcm93ZF9sZXZlbDogJ21lZGl1bScgfSxcbiAgeyBsaW5lOiAnUScsIHN0YXR1czogJ25vcm1hbCcsIGRlbGF5OiAwLCBjcm93ZF9sZXZlbDogJ21lZGl1bScgfSxcbiAgeyBsaW5lOiAnUicsIHN0YXR1czogJ25vcm1hbCcsIGRlbGF5OiAwLCBjcm93ZF9sZXZlbDogJ2xvdycgfSxcbiAgeyBsaW5lOiAnVycsIHN0YXR1czogJ25vcm1hbCcsIGRlbGF5OiAwLCBjcm93ZF9sZXZlbDogJ2xvdycgfSxcbiAgeyBsaW5lOiAnMScsIHN0YXR1czogJ25vcm1hbCcsIGRlbGF5OiAwLCBjcm93ZF9sZXZlbDogJ21lZGl1bScgfSxcbiAgeyBsaW5lOiAnMicsIHN0YXR1czogJ2RlbGF5ZWQnLCBkZWxheTogOCwgY3Jvd2RfbGV2ZWw6ICdoaWdoJyB9LFxuICB7IGxpbmU6ICczJywgc3RhdHVzOiAnbm9ybWFsJywgZGVsYXk6IDAsIGNyb3dkX2xldmVsOiAnbWVkaXVtJyB9LFxuICB7IGxpbmU6ICc0Jywgc3RhdHVzOiAnbm9ybWFsJywgZGVsYXk6IDAsIGNyb3dkX2xldmVsOiAnaGlnaCcgfSxcbiAgeyBsaW5lOiAnNScsIHN0YXR1czogJ25vcm1hbCcsIGRlbGF5OiAwLCBjcm93ZF9sZXZlbDogJ21lZGl1bScgfSxcbiAgeyBsaW5lOiAnNicsIHN0YXR1czogJ25vcm1hbCcsIGRlbGF5OiAwLCBjcm93ZF9sZXZlbDogJ2hpZ2gnIH0sXG4gIHsgbGluZTogJzcnLCBzdGF0dXM6ICdub3JtYWwnLCBkZWxheTogMCwgY3Jvd2RfbGV2ZWw6ICdtZWRpdW0nIH0sXG4gIHsgbGluZTogJ0onLCBzdGF0dXM6ICdub3JtYWwnLCBkZWxheTogMCwgY3Jvd2RfbGV2ZWw6ICdsb3cnIH0sXG4gIHsgbGluZTogJ1onLCBzdGF0dXM6ICdub3JtYWwnLCBkZWxheTogMCwgY3Jvd2RfbGV2ZWw6ICdsb3cnIH0sXG4gIHsgbGluZTogJ1MnLCBzdGF0dXM6ICdub3JtYWwnLCBkZWxheTogMCwgY3Jvd2RfbGV2ZWw6ICdsb3cnIH0sXG5dO1xuXG5jb25zdCBtb2NrQnVzUm91dGVzOiBzdHJpbmdbXSA9IFsnUTU4JywgJ1E1OScsICdRNjAnLCAnQjQxJywgJ0I0MicsICdCNDQnLCAnQjQ1JywgJ0I0NicsICdNMScsICdNMicsICdNMycsICdNNCcsICdNNScsICdCWDEnLCAnQlgyJywgJ0JYOScsICdCWDEwJywgJ1M0MCcsICdTNDQnLCAnUzQ2JywgJ1M0OCddO1xuXG5jb25zdCBnZW5lcmF0ZU1vY2tCdXNEYXRhID0gKCk6IEJ1c0RhdGFbXSA9PiB7XG4gIHJldHVybiBtb2NrQnVzUm91dGVzLm1hcChyb3V0ZSA9PiAoe1xuICAgIHJvdXRlLFxuICAgIGxvY2F0aW9uOiB7XG4gICAgICBsYXQ6IDQwLjcxMjggKyAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAwLjIsXG4gICAgICBsbmc6IC03NC4wMDYwICsgKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMC4yLFxuICAgIH0sXG4gICAgbmV4dF9zdG9wOiBgJHtyb3V0ZX0gU3RvcCAke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIwKSArIDF9YCxcbiAgICBlc3RpbWF0ZWRfYXJyaXZhbDogbmV3IERhdGUoRGF0ZS5ub3coKSArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIwKSAqIDYwMDAwKS50b0lTT1N0cmluZygpLFxuICAgIGNyb3dkX2xldmVsOiBbJ2xvdycsICdtZWRpdW0nLCAnaGlnaCddW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDMpXSBhcyAnbG93JyB8ICdtZWRpdW0nIHwgJ2hpZ2gnLFxuICB9KSk7XG59O1xuXG4vLyBBUEkgc2VydmljZSBmdW5jdGlvbnNcbmNsYXNzIFRyYW5zaXRBUEkge1xuICAvLyBTdWJ3YXkgZGF0YVxuICBhc3luYyBnZXRTdWJ3YXlTdGF0dXMoKTogUHJvbWlzZTxTdWJ3YXlEYXRhW10+IHtcbiAgICAvLyBJbiBhIHJlYWwgYXBwLCB0aGlzIHdvdWxkIGJlIGFuIEFQSSBjYWxsIHRvIE1UQVxuICAgIC8vIHJldHVybiBheGlvcy5nZXQoYCR7QVBJX0NPTkZJRy5NVEFfQkFTRV9VUkx9L3N1YndheS9zdGF0dXNgKS50aGVuKHJlcyA9PiByZXMuZGF0YSk7XG4gICAgXG4gICAgLy8gVXNpbmcgbW9jayBkYXRhIGZvciBub3dcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1vY2tTdWJ3YXlEYXRhKTtcbiAgfVxuXG4gIGFzeW5jIGdldFN1YndheUxpbmUobGluZTogc3RyaW5nKTogUHJvbWlzZTxTdWJ3YXlEYXRhIHwgbnVsbD4ge1xuICAgIC8vIEluIGEgcmVhbCBhcHAsIHRoaXMgd291bGQgYmUgYW4gQVBJIGNhbGwgdG8gTVRBXG4gICAgLy8gcmV0dXJuIGF4aW9zLmdldChgJHtBUElfQ09ORklHLk1UQV9CQVNFX1VSTH0vc3Vid2F5L2xpbmUvJHtsaW5lfWApLnRoZW4ocmVzID0+IHJlcy5kYXRhKTtcbiAgICBcbiAgICAvLyBVc2luZyBtb2NrIGRhdGEgZm9yIG5vd1xuICAgIGNvbnN0IGxpbmVEYXRhID0gbW9ja1N1YndheURhdGEuZmluZChzdWJ3YXkgPT4gc3Vid2F5LmxpbmUgPT09IGxpbmUpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobGluZURhdGEgfHwgbnVsbCk7XG4gIH1cblxuICAvLyBCdXMgZGF0YVxuICBhc3luYyBnZXRCdXNSb3V0ZXMoYm9yb3VnaDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIC8vIEluIGEgcmVhbCBhcHAsIHRoaXMgd291bGQgYmUgYW4gQVBJIGNhbGxcbiAgICAvLyByZXR1cm4gYXhpb3MuZ2V0KGAke0FQSV9DT05GSUcuTVRBX0JBU0VfVVJMfS9idXMvcm91dGVzP2Jvcm91Z2g9JHtib3JvdWdofWApLnRoZW4ocmVzID0+IHJlcy5kYXRhKTtcbiAgICBcbiAgICAvLyBVc2luZyBtb2NrIGRhdGEgZmlsdGVyZWQgYnkgYm9yb3VnaCBwcmVmaXhcbiAgICBjb25zdCBib3JvdWdoUHJlZml4ID0gYm9yb3VnaC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKTtcbiAgICBjb25zdCByb3V0ZXMgPSBtb2NrQnVzUm91dGVzLmZpbHRlcihyb3V0ZSA9PiByb3V0ZS5zdGFydHNXaXRoKGJvcm91Z2hQcmVmaXgpKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJvdXRlcyk7XG4gIH1cblxuICBhc3luYyBnZXRCdXNMb2NhdGlvbnMocm91dGU6IHN0cmluZyk6IFByb21pc2U8QnVzRGF0YVtdPiB7XG4gICAgLy8gSW4gYSByZWFsIGFwcCwgdGhpcyB3b3VsZCBiZSBhbiBBUEkgY2FsbFxuICAgIC8vIHJldHVybiBheGlvcy5nZXQoYCR7QVBJX0NPTkZJRy5NVEFfQkFTRV9VUkx9L2J1cy9yb3V0ZS8ke3JvdXRlfS9sb2NhdGlvbnNgKS50aGVuKHJlcyA9PiByZXMuZGF0YSk7XG4gICAgXG4gICAgLy8gVXNpbmcgbW9jayBkYXRhXG4gICAgY29uc3QgYnVzRGF0YSA9IGdlbmVyYXRlTW9ja0J1c0RhdGEoKS5maWx0ZXIoYnVzID0+IGJ1cy5yb3V0ZSA9PT0gcm91dGUpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoYnVzRGF0YSk7XG4gIH1cblxuICAvLyBCaWtlIGRhdGFcbiAgYXN5bmMgZ2V0QmlrZVN0YXRpb25zKGxhdDogbnVtYmVyLCBsbmc6IG51bWJlciwgcmFkaXVzOiBudW1iZXIgPSAxKTogUHJvbWlzZTxCaWtlRGF0YVtdPiB7XG4gICAgLy8gSW4gYSByZWFsIGFwcCwgdGhpcyB3b3VsZCBiZSBhbiBBUEkgY2FsbCB0byBDaXRpIEJpa2VcbiAgICAvLyByZXR1cm4gYXhpb3MuZ2V0KGAke0FQSV9DT05GSUcuQ0lUSUJJS0VfQkFTRV9VUkx9L3N0YXRpb25faW5mb3JtYXRpb24uanNvbmApLnRoZW4ocmVzID0+IHJlcy5kYXRhLmRhdGEuc3RhdGlvbnMpO1xuICAgIFxuICAgIC8vIEdlbmVyYXRlIG1vY2sgYmlrZSBzdGF0aW9ucyBhcm91bmQgdGhlIHByb3ZpZGVkIGNvb3JkaW5hdGVzXG4gICAgY29uc3Qgc3RhdGlvbnM6IEJpa2VEYXRhW10gPSBbXTtcbiAgICBjb25zdCBzdGF0aW9uQ291bnQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA1KSArIDM7IC8vIDMtNyBzdGF0aW9uc1xuICAgIFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhdGlvbkNvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IHN0YXRpb25MYXQgPSBsYXQgKyAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAwLjAyICogcmFkaXVzO1xuICAgICAgY29uc3Qgc3RhdGlvbkxuZyA9IGxuZyArIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDAuMDIgKiByYWRpdXM7XG4gICAgICBcbiAgICAgIHN0YXRpb25zLnB1c2goe1xuICAgICAgICBzdGF0aW9uX2lkOiBgc3RhdGlvbi0ke2l9YCxcbiAgICAgICAgbmFtZTogYEJpa2UgU3RhdGlvbiAke2kgKyAxfWAsXG4gICAgICAgIGxvY2F0aW9uOiB7XG4gICAgICAgICAgbGF0OiBzdGF0aW9uTGF0LFxuICAgICAgICAgIGxuZzogc3RhdGlvbkxuZyxcbiAgICAgICAgfSxcbiAgICAgICAgYXZhaWxhYmxlX2Jpa2VzOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxNSksXG4gICAgICAgIGF2YWlsYWJsZV9kb2NrczogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApLFxuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc3RhdGlvbnMpO1xuICB9XG5cbiAgLy8gVWJlci9UYXhpIGRhdGFcbiAgYXN5bmMgZ2V0VWJlckVzdGltYXRlKHN0YXJ0TGF0OiBudW1iZXIsIHN0YXJ0TG5nOiBudW1iZXIsIGVuZExhdDogbnVtYmVyLCBlbmRMbmc6IG51bWJlcik6IFByb21pc2U8VWJlckRhdGFbXT4ge1xuICAgIC8vIEluIGEgcmVhbCBhcHAsIHRoaXMgd291bGQgYmUgYW4gQVBJIGNhbGwgdG8gVWJlclxuICAgIC8vIHJldHVybiBheGlvcy5nZXQoYCR7QVBJX0NPTkZJRy5VQkVSX0JBU0VfVVJMfS9lc3RpbWF0ZXMvcHJpY2U/c3RhcnRfbGF0aXR1ZGU9JHtzdGFydExhdH0mc3RhcnRfbG9uZ2l0dWRlPSR7c3RhcnRMbmd9JmVuZF9sYXRpdHVkZT0ke2VuZExhdH0mZW5kX2xvbmdpdHVkZT0ke2VuZExuZ31gKS50aGVuKHJlcyA9PiByZXMuZGF0YS5wcmljZXMpO1xuICAgIFxuICAgIC8vIEdlbmVyYXRlIG1vY2sgVWJlciBvcHRpb25zXG4gICAgY29uc3Qgb3B0aW9ucyA9IFtcbiAgICAgIHsgcHJvZHVjdF9pZDogJ3ViZXJ4JywgZGlzcGxheV9uYW1lOiAnVWJlclgnIH0sXG4gICAgICB7IHByb2R1Y3RfaWQ6ICd1YmVyeGwnLCBkaXNwbGF5X25hbWU6ICdVYmVyWEwnIH0sXG4gICAgICB7IHByb2R1Y3RfaWQ6ICd1YmVyYmxhY2snLCBkaXNwbGF5X25hbWU6ICdVYmVyIEJsYWNrJyB9LFxuICAgICAgeyBwcm9kdWN0X2lkOiAndWJlcnBvb2wnLCBkaXNwbGF5X25hbWU6ICdVYmVyIFBvb2wnIH0sXG4gICAgXTtcbiAgICBcbiAgICAvLyBDYWxjdWxhdGUgbW9jayBkdXJhdGlvbiBhbmQgZmFyZSBiYXNlZCBvbiBkaXN0YW5jZVxuICAgIGNvbnN0IGRpc3RhbmNlID0gdGhpcy5jYWxjdWxhdGVEaXN0YW5jZShzdGFydExhdCwgc3RhcnRMbmcsIGVuZExhdCwgZW5kTG5nKTtcbiAgICBcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG9wdGlvbnMubWFwKG9wdGlvbiA9PiAoe1xuICAgICAgLi4ub3B0aW9uLFxuICAgICAgZXN0aW1hdGU6IHtcbiAgICAgICAgZHVyYXRpb246IE1hdGguZmxvb3IoZGlzdGFuY2UgKiAxMjApLCAvLyAxMjAgc2Vjb25kcyBwZXIgbWlsZVxuICAgICAgICBmYXJlOiBNYXRoLmZsb29yKChvcHRpb24ucHJvZHVjdF9pZCA9PT0gJ3ViZXJwb29sJyA/IDIuMCA6IDIuNSkgKiBkaXN0YW5jZSAqIDEwMCkgLyAxMDAsXG4gICAgICB9LFxuICAgIH0pKSk7XG4gIH1cblxuICBhc3luYyBnZXRUYXhpRXN0aW1hdGUoc3RhcnRMYXQ6IG51bWJlciwgc3RhcnRMbmc6IG51bWJlciwgZW5kTGF0OiBudW1iZXIsIGVuZExuZzogbnVtYmVyKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICAvLyBJbiBhIHJlYWwgYXBwLCB0aGlzIHdvdWxkIGJlIGFuIEFQSSBjYWxsIG9yIGNhbGN1bGF0aW9uXG4gICAgLy8gcmV0dXJuIGF4aW9zLmdldChgJHtBUElfQ09ORklHLlRBWElfQkFTRV9VUkx9L2VzdGltYXRlP3N0YXJ0X2xhdGl0dWRlPSR7c3RhcnRMYXR9JnN0YXJ0X2xvbmdpdHVkZT0ke3N0YXJ0TG5nfSZlbmRfbGF0aXR1ZGU9JHtlbmRMYXR9JmVuZF9sb25naXR1ZGU9JHtlbmRMbmd9YCkudGhlbihyZXMgPT4gcmVzLmRhdGEuZmFyZSk7XG4gICAgXG4gICAgLy8gQ2FsY3VsYXRlIG1vY2sgdGF4aSBmYXJlIGJhc2VkIG9uIGRpc3RhbmNlXG4gICAgY29uc3QgZGlzdGFuY2UgPSB0aGlzLmNhbGN1bGF0ZURpc3RhbmNlKHN0YXJ0TGF0LCBzdGFydExuZywgZW5kTGF0LCBlbmRMbmcpO1xuICAgIGNvbnN0IGJhc2VGYXJlID0gMi41MDtcbiAgICBjb25zdCBwZXJNaWxlRmFyZSA9IDIuNTA7XG4gICAgXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShNYXRoLmZsb29yKChiYXNlRmFyZSArIGRpc3RhbmNlICogcGVyTWlsZUZhcmUpICogMTAwKSAvIDEwMCk7XG4gIH1cblxuICAvLyBIZWxwZXIgZnVuY3Rpb25zXG4gIHByaXZhdGUgY2FsY3VsYXRlRGlzdGFuY2UobGF0MTogbnVtYmVyLCBsbmcxOiBudW1iZXIsIGxhdDI6IG51bWJlciwgbG5nMjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBSID0gMzk1OC44OyAvLyBFYXJ0aCByYWRpdXMgaW4gbWlsZXNcbiAgICBjb25zdCBkTGF0ID0gdGhpcy50b1JhZGlhbnMobGF0MiAtIGxhdDEpO1xuICAgIGNvbnN0IGRMbmcgPSB0aGlzLnRvUmFkaWFucyhsbmcyIC0gbG5nMSk7XG4gICAgY29uc3QgYSA9XG4gICAgICBNYXRoLnNpbihkTGF0IC8gMikgKiBNYXRoLnNpbihkTGF0IC8gMikgK1xuICAgICAgTWF0aC5jb3ModGhpcy50b1JhZGlhbnMobGF0MSkpICogTWF0aC5jb3ModGhpcy50b1JhZGlhbnMobGF0MikpICpcbiAgICAgIE1hdGguc2luKGRMbmcgLyAyKSAqIE1hdGguc2luKGRMbmcgLyAyKTtcbiAgICBjb25zdCBjID0gMiAqIE1hdGguYXRhbjIoTWF0aC5zcXJ0KGEpLCBNYXRoLnNxcnQoMSAtIGEpKTtcbiAgICBjb25zdCBkaXN0YW5jZSA9IFIgKiBjO1xuICAgIFxuICAgIHJldHVybiBkaXN0YW5jZTtcbiAgfVxuXG4gIHByaXZhdGUgdG9SYWRpYW5zKGRlZ3JlZXM6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIGRlZ3JlZXMgKiBNYXRoLlBJIC8gMTgwO1xuICB9XG59XG5cbi8vIEV4cG9ydCBhIHNpbmdsZXRvbiBpbnN0YW5jZVxuZXhwb3J0IGNvbnN0IHRyYW5zaXRBUEkgPSBuZXcgVHJhbnNpdEFQSSgpOyAiXSwibmFtZXMiOlsiQVBJX0NPTkZJRyIsIk1UQV9CQVNFX1VSTCIsIkNJVElCSUtFX0JBU0VfVVJMIiwiVUJFUl9CQVNFX1VSTCIsIkdPT0dMRV9NQVBTX0JBU0VfVVJMIiwibW9ja1N1YndheURhdGEiLCJsaW5lIiwic3RhdHVzIiwiZGVsYXkiLCJjcm93ZF9sZXZlbCIsIm1vY2tCdXNSb3V0ZXMiLCJnZW5lcmF0ZU1vY2tCdXNEYXRhIiwibWFwIiwicm91dGUiLCJsb2NhdGlvbiIsImxhdCIsIk1hdGgiLCJyYW5kb20iLCJsbmciLCJuZXh0X3N0b3AiLCJmbG9vciIsImVzdGltYXRlZF9hcnJpdmFsIiwiRGF0ZSIsIm5vdyIsInRvSVNPU3RyaW5nIiwiVHJhbnNpdEFQSSIsImdldFN1YndheVN0YXR1cyIsIlByb21pc2UiLCJyZXNvbHZlIiwiZ2V0U3Vid2F5TGluZSIsImxpbmVEYXRhIiwiZmluZCIsInN1YndheSIsImdldEJ1c1JvdXRlcyIsImJvcm91Z2giLCJib3JvdWdoUHJlZml4IiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJyb3V0ZXMiLCJmaWx0ZXIiLCJzdGFydHNXaXRoIiwiZ2V0QnVzTG9jYXRpb25zIiwiYnVzRGF0YSIsImJ1cyIsImdldEJpa2VTdGF0aW9ucyIsInJhZGl1cyIsInN0YXRpb25zIiwic3RhdGlvbkNvdW50IiwiaSIsInN0YXRpb25MYXQiLCJzdGF0aW9uTG5nIiwicHVzaCIsInN0YXRpb25faWQiLCJuYW1lIiwiYXZhaWxhYmxlX2Jpa2VzIiwiYXZhaWxhYmxlX2RvY2tzIiwiZ2V0VWJlckVzdGltYXRlIiwic3RhcnRMYXQiLCJzdGFydExuZyIsImVuZExhdCIsImVuZExuZyIsIm9wdGlvbnMiLCJwcm9kdWN0X2lkIiwiZGlzcGxheV9uYW1lIiwiZGlzdGFuY2UiLCJjYWxjdWxhdGVEaXN0YW5jZSIsIm9wdGlvbiIsImVzdGltYXRlIiwiZHVyYXRpb24iLCJmYXJlIiwiZ2V0VGF4aUVzdGltYXRlIiwiYmFzZUZhcmUiLCJwZXJNaWxlRmFyZSIsImxhdDEiLCJsbmcxIiwibGF0MiIsImxuZzIiLCJSIiwiZExhdCIsInRvUmFkaWFucyIsImRMbmciLCJhIiwic2luIiwiY29zIiwiYyIsImF0YW4yIiwic3FydCIsImRlZ3JlZXMiLCJQSSIsInRyYW5zaXRBUEkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/lib/api.ts\n");

/***/ }),

/***/ "(api)/./src/pages/api/routes.ts":
/*!*********************************!*\
  !*** ./src/pages/api/routes.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/api */ \"(api)/./src/lib/api.ts\");\n\n// Mock coordinates for some NYC locations\nconst locationCoordinates = {\n    \"Manhattan\": [\n        40.7831,\n        -73.9712\n    ],\n    \"Brooklyn\": [\n        40.6782,\n        -73.9442\n    ],\n    \"Queens\": [\n        40.7282,\n        -73.7949\n    ],\n    \"Bronx\": [\n        40.8448,\n        -73.8648\n    ],\n    \"Staten Island\": [\n        40.5795,\n        -74.1502\n    ],\n    \"Times Square\": [\n        40.7580,\n        -73.9855\n    ],\n    \"Central Park\": [\n        40.7829,\n        -73.9654\n    ],\n    \"Prospect Park\": [\n        40.6602,\n        -73.9690\n    ],\n    \"Flushing Meadows\": [\n        40.7466,\n        -73.8422\n    ],\n    \"Flushing\": [\n        40.7654,\n        -73.8318\n    ],\n    \"Bayside\": [\n        40.7612,\n        -73.7716\n    ],\n    \"Main St\": [\n        40.7590,\n        -73.8300\n    ],\n    \"Yankee Stadium\": [\n        40.8296,\n        -73.9262\n    ]\n};\n// Traffic data mock (in a real app this would be real-time data)\nconst trafficConditions = {\n    \"Manhattan\": {\n        level: \"high\",\n        factor: 1.5\n    },\n    \"Brooklyn\": {\n        level: \"medium\",\n        factor: 1.3\n    },\n    \"Queens\": {\n        level: \"medium\",\n        factor: 1.2\n    },\n    \"Bronx\": {\n        level: \"medium\",\n        factor: 1.25\n    },\n    \"Staten Island\": {\n        level: \"low\",\n        factor: 1.1\n    },\n    \"Flushing\": {\n        level: \"medium\",\n        factor: 1.2\n    },\n    \"Bayside\": {\n        level: \"low\",\n        factor: 1.1\n    },\n    \"Times Square\": {\n        level: \"high\",\n        factor: 1.6\n    },\n    \"Central Park\": {\n        level: \"medium\",\n        factor: 1.3\n    }\n};\n// Topology data - elevation changes that affect walking/biking comfort\nconst topologyDifficulty = {\n    \"Manhattan\": 0.2,\n    \"Brooklyn\": 0.1,\n    \"Queens\": 0.1,\n    \"Bronx\": 0.4,\n    \"Staten Island\": 0.5,\n    \"Flushing\": 0.1,\n    \"Bayside\": 0.2,\n    \"Times Square\": 0.1,\n    \"Central Park\": 0.3\n};\n// Helper function to get coordinates from a location string\nconst getCoordinates = (location)=>{\n    // Normalize the location string for better matching\n    const normalizedLocation = location.toLowerCase();\n    // First try exact matches for specific neighborhoods/locations\n    for (const [name, coords] of Object.entries(locationCoordinates)){\n        if (normalizedLocation.includes(name.toLowerCase())) {\n            return coords;\n        }\n    }\n    // If no specific match, try to determine which borough it's in\n    if (normalizedLocation.includes(\"queens\") || normalizedLocation.includes(\"flushing\") || normalizedLocation.includes(\"bayside\") || normalizedLocation.includes(\"jamaica\") || normalizedLocation.includes(\"astoria\")) {\n        return locationCoordinates[\"Queens\"];\n    }\n    if (normalizedLocation.includes(\"brooklyn\") || normalizedLocation.includes(\"williamsburg\") || normalizedLocation.includes(\"park slope\")) {\n        return locationCoordinates[\"Brooklyn\"];\n    }\n    if (normalizedLocation.includes(\"bronx\")) {\n        return locationCoordinates[\"Bronx\"];\n    }\n    if (normalizedLocation.includes(\"staten\")) {\n        return locationCoordinates[\"Staten Island\"];\n    }\n    // Default to Manhattan if not found\n    return locationCoordinates[\"Manhattan\"];\n};\n// Helper function to calculate distance between two coordinates\nconst calculateDistance = (lat1, lng1, lat2, lng2)=>{\n    const R = 3958.8; // Earth radius in miles\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLng = (lng2 - lng1) * Math.PI / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c;\n    return distance;\n};\n// Define the route colors for different modes\nconst getRouteColor = (mode)=>{\n    switch(mode){\n        case \"subway\":\n            return \"#3b82f6\"; // blue-500\n        case \"bus\":\n            return \"#22c55e\"; // green-500\n        case \"walk\":\n            return \"#6b7280\"; // gray-500\n        case \"bike\":\n        case \"ebike\":\n            return \"#8b5cf6\"; // purple-500\n        case \"ferry\":\n            return \"#06b6d4\"; // cyan-500\n        case \"taxi\":\n        case \"uber\":\n            return \"#f59e0b\"; // amber-500\n        default:\n            return \"#ef4444\"; // red-500\n    }\n};\n// Add this after getRouteColor function and before interface RouteItem\nconst calculateCO2Emissions = (mode, distanceKm)=>{\n    // CO2 emissions in grams per kilometer\n    const emissionsFactors = {\n        \"subway\": 30,\n        \"bus\": 70,\n        \"walk\": 0,\n        \"bike\": 0,\n        \"ebike\": 5,\n        \"ferry\": 120,\n        \"taxi\": 150,\n        \"uber\": 150,\n        \"shared\": 90,\n        \"default\": 100 // Default value\n    };\n    const emissionFactor = emissionsFactors[mode] || emissionsFactors.default;\n    return Math.round(emissionFactor * distanceKm);\n};\nasync function handler(req, res) {\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            message: \"Method Not Allowed\"\n        });\n    }\n    const { from, to, priority, noise, safety, bags, wheelchair } = req.query;\n    if (!from || !to) {\n        return res.status(400).json({\n            message: \"Origin and destination are required\"\n        });\n    }\n    try {\n        // In a real app, we would use geocoding to get coordinates\n        const fromCoords = getCoordinates(from);\n        const toCoords = getCoordinates(to);\n        // Log the coordinates for debugging\n        console.log(`From location: \"${from}\" → coordinates: [${fromCoords[0]}, ${fromCoords[1]}]`);\n        console.log(`To location: \"${to}\" → coordinates: [${toCoords[0]}, ${toCoords[1]}]`);\n        // Get user preferences\n        const userPriority = priority || \"balanced\";\n        const userNoise = noise || \"moderate\";\n        const userSafety = safety || \"moderate\";\n        const userBags = parseInt(bags || \"0\", 10);\n        const requireWheelchair = wheelchair === \"true\";\n        // Calculate distance\n        const distance = calculateDistance(fromCoords[0], fromCoords[1], toCoords[0], toCoords[1]);\n        // Get real-time transit data\n        const subwayStatus = await _lib_api__WEBPACK_IMPORTED_MODULE_0__.transitAPI.getSubwayStatus();\n        // Determine available subway lines based on location\n        const subwayLinesByLocation = {\n            \"Manhattan\": [\n                \"1\",\n                \"2\",\n                \"3\",\n                \"4\",\n                \"5\",\n                \"6\",\n                \"A\",\n                \"C\",\n                \"E\",\n                \"B\",\n                \"D\",\n                \"F\",\n                \"M\",\n                \"N\",\n                \"Q\",\n                \"R\",\n                \"W\",\n                \"L\"\n            ],\n            \"Brooklyn\": [\n                \"A\",\n                \"C\",\n                \"G\",\n                \"J\",\n                \"Z\",\n                \"L\",\n                \"M\",\n                \"N\",\n                \"Q\",\n                \"R\",\n                \"2\",\n                \"3\",\n                \"4\",\n                \"5\"\n            ],\n            \"Queens\": [\n                \"E\",\n                \"F\",\n                \"M\",\n                \"R\",\n                \"N\",\n                \"W\",\n                \"G\",\n                \"7\"\n            ],\n            \"Bronx\": [\n                \"1\",\n                \"2\",\n                \"4\",\n                \"5\",\n                \"6\",\n                \"B\",\n                \"D\"\n            ],\n            \"Staten Island\": [\n                \"SIR\"\n            ],\n            \"Flushing\": [\n                \"7\"\n            ],\n            \"Main St\": [\n                \"7\"\n            ],\n            \"Times Square\": [\n                \"1\",\n                \"2\",\n                \"3\",\n                \"N\",\n                \"Q\",\n                \"R\",\n                \"W\",\n                \"7\",\n                \"S\"\n            ],\n            \"Central Park\": [\n                \"A\",\n                \"B\",\n                \"C\",\n                \"D\",\n                \"1\"\n            ],\n            \"Yankee Stadium\": [\n                \"4\",\n                \"B\",\n                \"D\"\n            ],\n            \"JFK Airport\": [\n                \"A\",\n                \"E\"\n            ],\n            \"LaGuardia Airport\": [],\n            \"Prospect Park\": [\n                \"B\",\n                \"Q\",\n                \"S\"\n            ]\n        };\n        // Determine from and to areas to check subway availability\n        const fromArea = Object.keys(locationCoordinates).find((area)=>from.toLowerCase().includes(area.toLowerCase())) || \"Manhattan\";\n        const toArea = Object.keys(locationCoordinates).find((area)=>to.toLowerCase().includes(area.toLowerCase())) || \"Manhattan\";\n        // Check available subway lines for the route\n        const fromSubwayLines = subwayLinesByLocation[fromArea] || [];\n        const toSubwayLines = subwayLinesByLocation[toArea] || [];\n        // Find common subway lines or lines that can get you there with a transfer\n        let availableSubwayLines = fromSubwayLines.filter((line)=>toSubwayLines.includes(line));\n        // If no direct lines, consider options with transfers\n        const hasTransferOptions = fromSubwayLines.length > 0 && toSubwayLines.length > 0;\n        // Check subway status to see if the lines are operating normally\n        const operatingSubwayLines = availableSubwayLines.filter((line)=>{\n            const lineStatus = subwayStatus.find((s)=>s.line === line);\n            return lineStatus && lineStatus.status === \"normal\";\n        });\n        // Filter to just get one operating line if available\n        const bestSubwayLine = operatingSubwayLines.length > 0 ? operatingSubwayLines[0] : null;\n        // Get all the bus routes for both areas\n        const fromBoroughPrefix = fromArea.charAt(0).toUpperCase();\n        const toBoroughPrefix = toArea.charAt(0).toUpperCase();\n        const busRoutesFrom = await _lib_api__WEBPACK_IMPORTED_MODULE_0__.transitAPI.getBusRoutes(fromArea);\n        // Map specific neighborhoods to appropriate bus routes\n        const busRoutesByArea = {\n            \"Manhattan\": [\n                \"M1\",\n                \"M2\",\n                \"M3\",\n                \"M4\",\n                \"M5\",\n                \"M15\",\n                \"M31\",\n                \"M42\",\n                \"M60\"\n            ],\n            \"Brooklyn\": [\n                \"B41\",\n                \"B42\",\n                \"B44\",\n                \"B46\",\n                \"B67\",\n                \"B68\",\n                \"B69\"\n            ],\n            \"Queens\": [\n                \"Q58\",\n                \"Q59\",\n                \"Q60\",\n                \"Q65\",\n                \"Q66\",\n                \"Q44\",\n                \"Q46\"\n            ],\n            \"Bronx\": [\n                \"BX1\",\n                \"BX2\",\n                \"BX9\",\n                \"BX10\",\n                \"BX12\",\n                \"BX22\"\n            ],\n            \"Staten Island\": [\n                \"S40\",\n                \"S44\",\n                \"S46\",\n                \"S48\",\n                \"S51\",\n                \"S53\"\n            ],\n            \"Flushing\": [\n                \"Q65\",\n                \"Q66\",\n                \"Q17\",\n                \"Q27\",\n                \"Q44\"\n            ],\n            \"Bayside\": [\n                \"Q27\",\n                \"Q31\",\n                \"Q76\",\n                \"Q13\"\n            ],\n            \"Times Square\": [\n                \"M42\",\n                \"M104\",\n                \"Q104\"\n            ],\n            \"JFK Airport\": [\n                \"Q3\",\n                \"Q10\",\n                \"B15\"\n            ],\n            \"LaGuardia Airport\": [\n                \"Q70\",\n                \"M60\"\n            ]\n        };\n        // Get specific bus routes for origin and destination\n        const specificFromBuses = busRoutesByArea[fromArea] || [];\n        const specificToBuses = busRoutesByArea[toArea] || [];\n        // Find bus routes that might connect the two areas\n        let connectingBuses = specificFromBuses.filter((bus)=>specificToBuses.includes(bus));\n        // Check if origin and destination are in different boroughs\n        const originBorough = fromArea === \"Manhattan\" || fromArea === \"Times Square\" || fromArea === \"Central Park\" ? \"Manhattan\" : fromArea === \"Brooklyn\" || fromArea === \"Prospect Park\" ? \"Brooklyn\" : fromArea === \"Queens\" || fromArea === \"Flushing\" || fromArea === \"Bayside\" || fromArea === \"JFK Airport\" ? \"Queens\" : fromArea === \"Bronx\" || fromArea === \"Yankee Stadium\" ? \"Bronx\" : fromArea === \"Staten Island\" ? \"Staten Island\" : \"Manhattan\";\n        const destinationBorough = toArea === \"Manhattan\" || toArea === \"Times Square\" || toArea === \"Central Park\" ? \"Manhattan\" : toArea === \"Brooklyn\" || toArea === \"Prospect Park\" ? \"Brooklyn\" : toArea === \"Queens\" || toArea === \"Flushing\" || toArea === \"Bayside\" || toArea === \"JFK Airport\" ? \"Queens\" : toArea === \"Bronx\" || toArea === \"Yankee Stadium\" ? \"Bronx\" : toArea === \"Staten Island\" ? \"Staten Island\" : \"Manhattan\";\n        // Check if this is a cross-borough trip requiring transfers\n        const isCrossBoroughTrip = originBorough !== destinationBorough;\n        // Express Bus routes for cross-borough travel\n        const expressBusRoutes = {\n            \"Queens-Manhattan\": [\n                \"QM1\",\n                \"QM5\",\n                \"QM7\",\n                \"QM8\"\n            ],\n            \"Brooklyn-Manhattan\": [\n                \"BM1\",\n                \"BM2\",\n                \"BM3\",\n                \"BM4\"\n            ],\n            \"Bronx-Manhattan\": [\n                \"BxM1\",\n                \"BxM2\",\n                \"BxM3\",\n                \"BxM4\"\n            ],\n            \"Staten Island-Manhattan\": [\n                \"SIM1\",\n                \"SIM3\",\n                \"SIM4\",\n                \"SIM5\"\n            ]\n        };\n        // Get appropriate express bus if this is cross-borough\n        let expressBusRoute = \"\";\n        if (isCrossBoroughTrip) {\n            const routeKey = `${originBorough}-${destinationBorough}`;\n            const reverseRouteKey = `${destinationBorough}-${originBorough}`;\n            if (expressBusRoutes[routeKey]) {\n                expressBusRoute = expressBusRoutes[routeKey][0];\n            } else if (expressBusRoutes[reverseRouteKey]) {\n                expressBusRoute = expressBusRoutes[reverseRouteKey][0];\n            }\n        }\n        // If no direct connection, pick a bus from origin for local trips only\n        // For cross-borough trips without express buses, we'll rely on subway instead\n        if (connectingBuses.length === 0 && specificFromBuses.length > 0 && !isCrossBoroughTrip) {\n            connectingBuses = [\n                specificFromBuses[0]\n            ];\n        }\n        // Default to a borough-specific bus if nothing else is available\n        const busRoute = connectingBuses.length > 0 ? connectingBuses[0] : expressBusRoute || `${fromBoroughPrefix}${Math.floor(Math.random() * 50) + 1}`;\n        // Get traffic conditions for origin and destination areas\n        const originTraffic = trafficConditions[originBorough] || {\n            level: \"medium\",\n            factor: 1.25\n        };\n        const destinationTraffic = trafficConditions[destinationBorough] || {\n            level: \"medium\",\n            factor: 1.25\n        };\n        // Get topology difficulty for each area\n        const originTopology = topologyDifficulty[originBorough] || 0.2;\n        const destinationTopology = topologyDifficulty[destinationBorough] || 0.2;\n        // Calculate average traffic and topology difficulty\n        const avgTrafficFactor = (originTraffic.factor + destinationTraffic.factor) / 2;\n        const avgTopologyDifficulty = (originTopology + destinationTopology) / 2;\n        const generateRoutes = ()=>{\n            const routes = [];\n            // Calculate a balanced score to determine which route should be \"Best Overall\"\n            const calculateBalancedScore = (duration, cost, comfort, numTransfers, hasBags, isHilly, trafficImpact, isWheelchairAccessible)=>{\n                // Base comfort score from comfort level\n                let comfortScore = comfort === \"high\" ? 0.9 : comfort === \"medium\" ? 0.6 : 0.3;\n                // Adjust comfort for number of bags\n                if (userBags > 0) {\n                    // Each bag reduces comfort, especially for walking/biking\n                    comfortScore = Math.max(0.1, comfortScore - userBags * 0.1);\n                }\n                // Adjust comfort for topology if route involves walking or biking\n                if (isHilly) {\n                    comfortScore = Math.max(0.1, comfortScore - avgTopologyDifficulty);\n                }\n                // Normalize time and cost on a scale where lower is better\n                // Traffic factor increases duration for road-based transport\n                const adjustedDuration = duration * trafficImpact;\n                const timeScore = Math.max(0, 1 - adjustedDuration / 120); // Assume 120 mins is worst case\n                const costScore = Math.max(0, 1 - cost / 30); // Assume $30 is worst case\n                // Transfer penalty\n                const transferScore = Math.max(0, 1 - numTransfers * 0.15);\n                // Adjust weights based on user priority\n                let timeWeight = 0.85; // Dramatically increased base time weight (was 0.70)\n                let costWeight = 0.08; // Reduced (was 0.15)\n                let comfortWeight = 0.05; // Reduced (was 0.10)\n                let transferWeight = 0.02; // Reduced (was 0.05)\n                switch(userPriority){\n                    case \"speed\":\n                        timeWeight = 0.90; // Even more emphasis on time (was 0.85)\n                        costWeight = 0.05; // Further reduced (was 0.08)\n                        comfortWeight = 0.03; // Further reduced (was 0.04)\n                        transferWeight = 0.02; // Further reduced (was 0.03)\n                        break;\n                    case \"cost\":\n                        timeWeight = 0.75; // Still very high time priority (was 0.60)\n                        costWeight = 0.15; // Reduced (was 0.25)\n                        comfortWeight = 0.07; // Reduced (was 0.10)\n                        transferWeight = 0.03; // Reduced (was 0.05)\n                        break;\n                    case \"comfort\":\n                        timeWeight = 0.75; // Still very high time priority (was 0.60)\n                        costWeight = 0.10; // Reduced (was 0.15)\n                        comfortWeight = 0.12; // Reduced (was 0.20)\n                        transferWeight = 0.03; // Reduced (was 0.05)\n                        break;\n                    default:\n                        break;\n                }\n                // Further adjust comfort weight based on noise sensitivity\n                if (userNoise === \"high\") {\n                    // Minimal comfort weight adjustment to maintain time priority\n                    comfortWeight += 0.03; // Reduced adjustment (was 0.05)\n                    // And reduce other weights proportionally, taking more from cost than time\n                    timeWeight -= 0.01; // Reduced reduction (was 0.02)\n                    costWeight -= 0.01; // Reduced reduction (was 0.02)\n                    transferWeight -= 0.01; // Same as before\n                }\n                // Adjust for safety preference\n                if (userSafety === \"high\") {\n                    // Minimal adjustments to maintain time priority\n                    transferWeight += 0.02; // Reduced adjustment (was 0.03)\n                    comfortWeight += 0.01; // Reduced adjustment (was 0.02)\n                    timeWeight -= 0.01; // Reduced reduction (was 0.02)\n                    costWeight -= 0.02; // Reduced reduction (was 0.03)\n                }\n                // Add wheelchair accessibility factor if needed\n                let accessibilityPenalty = 0;\n                if (requireWheelchair && !isWheelchairAccessible) {\n                    // Significantly penalize non-accessible routes when wheelchair is required\n                    accessibilityPenalty = 0.5;\n                }\n                const rawScore = (timeScore * timeWeight + costScore * costWeight + comfortScore * comfortWeight + transferScore * transferWeight) * (1 - accessibilityPenalty);\n                // Convert to 1-10 scale\n                return {\n                    raw: rawScore,\n                    score: Math.round(rawScore * 10),\n                    timeScore: Math.round(timeScore * 10),\n                    costScore: Math.round(costScore * 10),\n                    comfortScore: Math.round(comfortScore * 10),\n                    transferScore: Math.round(transferScore * 10)\n                };\n            };\n            // Function to generate route color based on score\n            const getRouteColorFromScore = (score)=>{\n                // Color gradient from red (1) to yellow (5) to green (10)\n                if (score <= 3) return \"#ef4444\"; // red-500\n                if (score <= 5) return \"#f59e0b\"; // amber-500\n                if (score <= 7) return \"#facc15\"; // yellow-400\n                if (score <= 9) return \"#65a30d\"; // lime-600\n                return \"#16a34a\"; // green-600\n            };\n            // Reference the outer getRouteColor function or redefine it here\n            const getRouteColorForMode = (mode)=>{\n                return getRouteColor(mode);\n            };\n            // 0. Best Overall route\n            const bestOverallRoute = {\n                id: \"0\",\n                name: \"Best Overall Route\",\n                duration: 0,\n                cost: 0,\n                comfort: \"medium\",\n                vectorScore: 0.95,\n                segments: [],\n                // Additional detailed information\n                hasTopologyImpact: false,\n                numTransfers: 0,\n                traffic: {\n                    level: \"medium\",\n                    impact: 1.0\n                },\n                eta: \"\",\n                costBreakdown: {\n                    fare: 0,\n                    additionalFees: 0,\n                    totalCost: 0\n                },\n                scores: {\n                    overall: 0,\n                    time: 0,\n                    cost: 0,\n                    comfort: 0,\n                    transfers: 0\n                },\n                routeColor: \"\",\n                pathData: []\n            };\n            // Helper to calculate ETA\n            const calculateETA = (durationMinutes)=>{\n                const now = new Date();\n                const eta = new Date(now.getTime() + durationMinutes * 60000);\n                return eta.toLocaleTimeString([], {\n                    hour: \"2-digit\",\n                    minute: \"2-digit\"\n                });\n            };\n            // Generate path data for map visualization\n            const generatePathData = (route)=>{\n                const pathData = [];\n                let lastCoords = fromCoords;\n                route.segments.forEach((segment, index)=>{\n                    const isLastSegment = index === route.segments.length - 1;\n                    const endCoords = isLastSegment ? toCoords : getCoordinates(segment.endLocation);\n                    // For different transport modes, generate different path types\n                    switch(segment.mode){\n                        case \"subway\":\n                            // Subway routes should follow mostly straight lines with slight curves\n                            pathData.push({\n                                type: \"subway\",\n                                color: getRouteColorForMode(segment.mode),\n                                points: [\n                                    lastCoords,\n                                    // Add a midpoint with slight offset for a natural curve\n                                    [\n                                        lastCoords[0] + (endCoords[0] - lastCoords[0]) * 0.5 + (Math.random() - 0.5) * 0.01,\n                                        lastCoords[1] + (endCoords[1] - lastCoords[1]) * 0.5 + (Math.random() - 0.5) * 0.01\n                                    ],\n                                    endCoords\n                                ]\n                            });\n                            break;\n                        case \"bus\":\n                            // Bus routes should follow a more zigzag street-like pattern\n                            const numPoints = Math.ceil(calculateDistance(lastCoords[0], lastCoords[1], endCoords[0], endCoords[1]) * 2);\n                            const points = [\n                                lastCoords\n                            ];\n                            // Generate points that zigzag like city streets\n                            let currentPoint = [\n                                ...lastCoords\n                            ];\n                            for(let i = 0; i < numPoints; i++){\n                                // Alternate between horizontal and vertical movement\n                                if (i % 2 === 0) {\n                                    currentPoint = [\n                                        currentPoint[0],\n                                        currentPoint[1] + (endCoords[1] - currentPoint[1]) * 0.3\n                                    ];\n                                } else {\n                                    currentPoint = [\n                                        currentPoint[0] + (endCoords[0] - currentPoint[0]) * 0.3,\n                                        currentPoint[1]\n                                    ];\n                                }\n                                points.push(currentPoint);\n                            }\n                            points.push(endCoords);\n                            pathData.push({\n                                type: \"bus\",\n                                color: getRouteColorForMode(segment.mode),\n                                points\n                            });\n                            break;\n                        case \"walk\":\n                            // Walking should be a relatively direct path\n                            pathData.push({\n                                type: \"walk\",\n                                color: getRouteColorForMode(segment.mode),\n                                dashArray: \"4,4\",\n                                points: [\n                                    lastCoords,\n                                    endCoords\n                                ]\n                            });\n                            break;\n                        case \"uber\":\n                        case \"taxi\":\n                            // Car routes follow streets but more direct than buses\n                            pathData.push({\n                                type: segment.mode,\n                                color: getRouteColorForMode(segment.mode),\n                                points: [\n                                    lastCoords,\n                                    [\n                                        lastCoords[0] + (endCoords[0] - lastCoords[0]) * 0.33,\n                                        lastCoords[1] + (endCoords[1] - lastCoords[1]) * 0.66\n                                    ],\n                                    [\n                                        lastCoords[0] + (endCoords[0] - lastCoords[0]) * 0.66,\n                                        lastCoords[1] + (endCoords[1] - lastCoords[1]) * 0.33\n                                    ],\n                                    endCoords\n                                ]\n                            });\n                            break;\n                        case \"ebike\":\n                            // Bike routes should follow streets but might take shortcuts\n                            pathData.push({\n                                type: \"ebike\",\n                                color: getRouteColorForMode(segment.mode),\n                                points: [\n                                    lastCoords,\n                                    [\n                                        lastCoords[0] + (endCoords[0] - lastCoords[0]) * 0.5 + (Math.random() - 0.5) * 0.005,\n                                        lastCoords[1] + (endCoords[1] - lastCoords[1]) * 0.5 + (Math.random() - 0.5) * 0.005\n                                    ],\n                                    endCoords\n                                ]\n                            });\n                            break;\n                        default:\n                            // Default direct line\n                            pathData.push({\n                                type: segment.mode,\n                                color: getRouteColorForMode(segment.mode),\n                                points: [\n                                    lastCoords,\n                                    endCoords\n                                ]\n                            });\n                    }\n                    lastCoords = endCoords;\n                });\n                return pathData;\n            };\n            // Process a completed route with all detailed information\n            const finalizeRoute = (route)=>{\n                // Count transfers (segments that change mode of transportation)\n                const numTransfers = route.segments.length > 0 ? route.segments.length - 1 : 0;\n                // Check if route has walking/biking components to consider topology\n                const hasTopologyImpact = route.segments.some((segment)=>segment.mode === \"walk\" || segment.mode === \"ebike\");\n                // Calculate traffic impact for road-based segments\n                const roadBasedSegments = route.segments.filter((segment)=>segment.mode === \"bus\" || segment.mode === \"uber\" || segment.mode === \"taxi\");\n                const trafficImpact = roadBasedSegments.length > 0 ? avgTrafficFactor : 1.0;\n                // Determine wheelchair accessibility\n                const isWheelchairAccessible = route.segments.every((segment)=>{\n                    if (segment.mode === \"walk\") return true; // Walking is always accessible\n                    if (segment.mode === \"subway\") {\n                        // Check if the specific station is accessible - in a real app this would check actual station data\n                        // For now we'll estimate that 40% of subway segments are wheelchair accessible\n                        return segment.hasOwnProperty(\"wheelchairAccessible\") ? segment.wheelchairAccessible : Math.random() > 0.6;\n                    }\n                    if (segment.mode === \"bus\") {\n                        // Most buses are accessible\n                        return segment.hasOwnProperty(\"wheelchairAccessible\") ? segment.wheelchairAccessible : Math.random() > 0.2;\n                    }\n                    if (segment.mode === \"uber\" || segment.mode === \"taxi\") {\n                        // Some taxis/ubers are wheelchair accessible\n                        return segment.hasOwnProperty(\"wheelchairAccessible\") ? segment.wheelchairAccessible : Math.random() > 0.7;\n                    }\n                    return false;\n                });\n                // Calculate cost breakdown\n                const costBreakdown = {\n                    fare: route.segments.reduce((total, segment)=>{\n                        // Only count positive costs (e.g., exclude free transfers)\n                        return total + (segment.cost > 0 ? segment.cost : 0);\n                    }, 0),\n                    additionalFees: 0,\n                    totalCost: route.cost\n                };\n                // Add fees for Uber/Taxi during high traffic\n                if (roadBasedSegments.length > 0 && trafficImpact > 1.2) {\n                    costBreakdown.additionalFees = parseFloat((costBreakdown.fare * 0.15).toFixed(2));\n                    costBreakdown.totalCost = parseFloat((costBreakdown.fare + costBreakdown.additionalFees).toFixed(2));\n                }\n                // Calculate route scores\n                const scores = calculateBalancedScore(route.duration, costBreakdown.totalCost, route.comfort, numTransfers, userBags > 0, hasTopologyImpact, trafficImpact, isWheelchairAccessible);\n                // Calculate ETA\n                const eta = calculateETA(Math.round(route.duration * trafficImpact));\n                // Generate route color based on overall score\n                const routeColor = getRouteColorFromScore(scores.score);\n                // Calculate CO2 emissions for the entire route\n                let totalCO2 = 0;\n                route.segments.forEach((segment)=>{\n                    // Calculate segment distance in km\n                    const segmentDistance = segment.distance || calculateDistance(fromCoords[0], fromCoords[1], toCoords[0], toCoords[1]) * 1.5; // Use a multiplier to account for non-direct routes\n                    // Calculate CO2 for this segment\n                    const segmentCO2 = calculateCO2Emissions(segment.mode, segmentDistance);\n                    segment.co2 = segmentCO2;\n                    totalCO2 += segmentCO2;\n                });\n                // Set total CO2 for the route\n                route.co2 = totalCO2;\n                // Generate path data for map\n                const pathData = generatePathData(route);\n                // Add detailed information to route\n                route.numTransfers = numTransfers;\n                route.hasTopologyImpact = hasTopologyImpact;\n                route.traffic = {\n                    level: trafficImpact > 1.3 ? \"high\" : trafficImpact > 1.1 ? \"medium\" : \"low\",\n                    impact: trafficImpact\n                };\n                route.eta = eta;\n                route.costBreakdown = costBreakdown;\n                route.scores = scores;\n                route.routeColor = routeColor;\n                route.pathData = pathData;\n                route.isWheelchairAccessible = isWheelchairAccessible;\n                // Enhance segments with scores\n                route.segments.forEach((segment)=>{\n                    // Score each segment based on mode and conditions\n                    const segmentScore = segment.mode === \"walk\" && hasTopologyImpact ? Math.max(3, 7 - Math.floor(avgTopologyDifficulty * 10)) : segment.mode === \"ebike\" && hasTopologyImpact ? Math.max(2, 6 - Math.floor(avgTopologyDifficulty * 10)) : segment.mode === \"bus\" || segment.mode === \"uber\" || segment.mode === \"taxi\" ? Math.max(2, 9 - Math.floor((trafficImpact - 1) * 10)) : 7; // Default reasonable score\n                    segment.score = segmentScore;\n                    segment.adjustedDuration = segment.mode === \"walk\" && hasTopologyImpact ? Math.round(segment.duration * (1 + avgTopologyDifficulty)) : segment.mode === \"bus\" || segment.mode === \"uber\" || segment.mode === \"taxi\" ? Math.round(segment.duration * trafficImpact) : segment.duration; // No adjustment for subway\n                });\n                return route;\n            };\n            // Decide on the best overall route based on distance\n            if (distance < 1) {\n                // Very short distance - walking might be best\n                bestOverallRoute.segments.push({\n                    mode: \"walk\",\n                    startLocation: from,\n                    endLocation: to,\n                    duration: Math.round(distance * 20),\n                    cost: 0,\n                    lineInfo: \"Walk to destination\"\n                });\n                bestOverallRoute.duration = Math.round(distance * 20);\n                bestOverallRoute.comfort = \"high\";\n            } else if (distance < 5 && (bestSubwayLine || connectingBuses.length > 0)) {\n                // Medium distance with transit options\n                // First segment - walk to station\n                bestOverallRoute.segments.push({\n                    mode: \"walk\",\n                    startLocation: from,\n                    endLocation: bestSubwayLine ? `Subway Station near ${from}` : `Bus Stop near ${from}`,\n                    duration: 5,\n                    cost: 0,\n                    lineInfo: `Walk to ${bestSubwayLine ? \"station\" : \"bus stop\"}`\n                });\n                // Second segment - transit\n                if (bestSubwayLine) {\n                    bestOverallRoute.segments.push({\n                        mode: \"subway\",\n                        startLocation: `Subway Station near ${from}`,\n                        endLocation: `Subway Station near ${to}`,\n                        duration: Math.round(distance * 8),\n                        cost: 2.75,\n                        lineInfo: `${bestSubwayLine} Train${bestSubwayLine === \"7\" ? \" (Flushing Line)\" : \"\"}`\n                    });\n                } else {\n                    bestOverallRoute.segments.push({\n                        mode: \"bus\",\n                        startLocation: `Bus Stop near ${from}`,\n                        endLocation: `Bus Stop near ${to}`,\n                        duration: Math.round(distance * 10),\n                        cost: 2.75,\n                        lineInfo: `${busRoute} Bus`\n                    });\n                }\n                // Last segment - walk to destination\n                bestOverallRoute.segments.push({\n                    mode: \"walk\",\n                    startLocation: bestSubwayLine ? `Subway Station near ${to}` : `Bus Stop near ${to}`,\n                    endLocation: to,\n                    duration: 5,\n                    cost: 0,\n                    lineInfo: \"Walk to destination\"\n                });\n                bestOverallRoute.duration = bestSubwayLine ? Math.round(distance * 8) + 10 // Subway time + walking\n                 : Math.round(distance * 10) + 10; // Bus time + walking\n                bestOverallRoute.cost = 2.75;\n                bestOverallRoute.comfort = bestSubwayLine ? \"medium\" : \"low\";\n            } else {\n                // Longer distance or no good transit - mixed mode might be best\n                // Start with transit if available for most of the route\n                if (bestSubwayLine || hasTransferOptions) {\n                    bestOverallRoute.segments.push({\n                        mode: \"walk\",\n                        startLocation: from,\n                        endLocation: `Subway Station near ${from}`,\n                        duration: 5,\n                        cost: 0,\n                        lineInfo: \"Walk to station\"\n                    });\n                    if (bestSubwayLine) {\n                        bestOverallRoute.segments.push({\n                            mode: \"subway\",\n                            startLocation: `Subway Station near ${from}`,\n                            endLocation: `Subway Station near ${to}`,\n                            duration: Math.round(distance * 7),\n                            cost: 2.75,\n                            lineInfo: `${bestSubwayLine} Train${bestSubwayLine === \"7\" ? \" (Flushing Line)\" : \"\"}`\n                        });\n                    } else {\n                        // Use transfer if needed\n                        const fromLine = fromSubwayLines[0];\n                        const toLine = toSubwayLines[0];\n                        bestOverallRoute.segments.push({\n                            mode: \"subway\",\n                            startLocation: `Subway Station near ${from}`,\n                            endLocation: \"Transfer Station\",\n                            duration: Math.round(distance * 4),\n                            cost: 2.75,\n                            lineInfo: `${fromLine} Train`\n                        });\n                        bestOverallRoute.segments.push({\n                            mode: \"subway\",\n                            startLocation: \"Transfer Station\",\n                            endLocation: `Subway Station near ${to}`,\n                            duration: Math.round(distance * 4),\n                            cost: 0,\n                            lineInfo: `${toLine} Train`\n                        });\n                    }\n                    // For longer distances, use Uber for the last mile\n                    if (distance > 8) {\n                        bestOverallRoute.segments.push({\n                            mode: \"uber\",\n                            startLocation: `Subway Station near ${to}`,\n                            endLocation: to,\n                            duration: 8,\n                            cost: 7.50,\n                            lineInfo: \"UberX (last mile)\"\n                        });\n                        bestOverallRoute.duration = Math.round(distance * 6) + 13; // Transit + uber + initial walk\n                        bestOverallRoute.cost = 10.25; // Subway + uber\n                        bestOverallRoute.comfort = \"high\";\n                    } else {\n                        bestOverallRoute.segments.push({\n                            mode: \"walk\",\n                            startLocation: `Subway Station near ${to}`,\n                            endLocation: to,\n                            duration: 5,\n                            cost: 0,\n                            lineInfo: \"Walk to destination\"\n                        });\n                        bestOverallRoute.duration = bestSubwayLine ? Math.round(distance * 7) + 10 // Subway time + walking\n                         : Math.round(distance * 8) + 10; // Transfer subway time + walking\n                        bestOverallRoute.cost = 2.75;\n                        bestOverallRoute.comfort = \"medium\";\n                    }\n                } else {\n                    // No good transit option - use Uber for efficiency\n                    bestOverallRoute.segments.push({\n                        mode: \"walk\",\n                        startLocation: from,\n                        endLocation: `Pickup Point near ${from}`,\n                        duration: 3,\n                        cost: 0,\n                        lineInfo: \"Walk to pickup point\"\n                    });\n                    bestOverallRoute.segments.push({\n                        mode: \"uber\",\n                        startLocation: `Pickup Point near ${from}`,\n                        endLocation: to,\n                        duration: Math.round(distance * 8),\n                        cost: parseFloat((distance * 2.25).toFixed(2)),\n                        lineInfo: \"UberX\"\n                    });\n                    bestOverallRoute.duration = Math.round(distance * 8) + 3;\n                    bestOverallRoute.cost = parseFloat((distance * 2.25).toFixed(2));\n                    bestOverallRoute.comfort = \"high\";\n                }\n            }\n            routes.push(bestOverallRoute);\n            // 1. If subway is available, create a subway route\n            if (bestSubwayLine || hasTransferOptions) {\n                const subwayRoute = {\n                    id: routes.length + \"\",\n                    name: \"Fastest Route\",\n                    duration: Math.round(distance * 10),\n                    cost: parseFloat((2.75 + (distance > 5 ? 3 : 0)).toFixed(2)),\n                    comfort: distance < 8 ? \"medium\" : \"low\",\n                    vectorScore: 0.89,\n                    segments: [\n                        {\n                            mode: \"walk\",\n                            startLocation: from,\n                            endLocation: `Subway Station near ${from}`,\n                            duration: 5,\n                            cost: 0,\n                            lineInfo: `Walk to station`\n                        }\n                    ]\n                };\n                // Add the subway segment(s)\n                if (bestSubwayLine) {\n                    // Direct subway line\n                    subwayRoute.segments.push({\n                        mode: \"subway\",\n                        startLocation: `Subway Station near ${from}`,\n                        endLocation: `Subway Station near ${to}`,\n                        duration: Math.round(distance * 8),\n                        cost: 2.75,\n                        lineInfo: `${bestSubwayLine} Train${bestSubwayLine === \"7\" ? \" (Flushing Line)\" : \"\"}`\n                    });\n                } else if (hasTransferOptions) {\n                    // Need a transfer\n                    const fromLine = fromSubwayLines[0];\n                    const toLine = toSubwayLines[0];\n                    subwayRoute.segments.push({\n                        mode: \"subway\",\n                        startLocation: `Subway Station near ${from}`,\n                        endLocation: `Transfer Station`,\n                        duration: Math.round(distance * 4),\n                        cost: 2.75,\n                        lineInfo: `${fromLine} Train`\n                    });\n                    subwayRoute.segments.push({\n                        mode: \"subway\",\n                        startLocation: `Transfer Station`,\n                        endLocation: `Subway Station near ${to}`,\n                        duration: Math.round(distance * 4),\n                        cost: 0,\n                        lineInfo: `${toLine} Train`\n                    });\n                }\n                // Add the final walking segment\n                subwayRoute.segments.push({\n                    mode: \"walk\",\n                    startLocation: `Subway Station near ${to}`,\n                    endLocation: to,\n                    duration: 7,\n                    cost: 0,\n                    lineInfo: `Walk to destination`\n                });\n                routes.push(subwayRoute);\n            }\n            // 2. Always create a ride-sharing route as an option\n            const uberRoute = {\n                id: routes.length + \"\",\n                name: \"Most Comfortable Route\",\n                duration: Math.round(distance * 12),\n                cost: parseFloat((distance * 2.5).toFixed(2)),\n                comfort: \"high\",\n                vectorScore: 0.78,\n                segments: [\n                    {\n                        mode: \"walk\",\n                        startLocation: from,\n                        endLocation: `Pickup Point near ${from}`,\n                        duration: 3,\n                        cost: 0,\n                        lineInfo: \"Walk to pickup point\"\n                    },\n                    {\n                        mode: \"uber\",\n                        startLocation: `Pickup Point near ${from}`,\n                        endLocation: `Drop-off near ${to}`,\n                        duration: Math.round(distance * 10),\n                        cost: parseFloat((distance * 2.5).toFixed(2)),\n                        lineInfo: \"UberX\"\n                    },\n                    {\n                        mode: \"walk\",\n                        startLocation: `Drop-off near ${to}`,\n                        endLocation: to,\n                        duration: 4,\n                        cost: 0,\n                        lineInfo: \"Walk to destination\"\n                    }\n                ]\n            };\n            routes.push(uberRoute);\n            // Add a taxi route option\n            const taxiRoute = {\n                id: routes.length + \"\",\n                name: \"Taxi Route\",\n                duration: Math.round(distance * 11),\n                cost: parseFloat((distance * 2.8).toFixed(2)),\n                comfort: \"high\",\n                vectorScore: 0.77,\n                segments: [\n                    {\n                        mode: \"walk\",\n                        startLocation: from,\n                        endLocation: `Taxi Stand near ${from}`,\n                        duration: 4,\n                        cost: 0,\n                        lineInfo: \"Walk to taxi stand\"\n                    },\n                    {\n                        mode: \"taxi\",\n                        startLocation: `Taxi Stand near ${from}`,\n                        endLocation: to,\n                        duration: Math.round(distance * 9),\n                        cost: parseFloat((distance * 2.8).toFixed(2)),\n                        lineInfo: \"NYC Taxi\"\n                    }\n                ]\n            };\n            routes.push(taxiRoute);\n            // Add an E-bike route option if the distance is under 10 miles\n            if (distance < 10) {\n                const ebikeRoute = {\n                    id: routes.length + \"\",\n                    name: \"E-Bike Route\",\n                    duration: Math.round(distance * 15),\n                    cost: 5.00,\n                    comfort: \"medium\",\n                    vectorScore: 0.72,\n                    segments: [\n                        {\n                            mode: \"walk\",\n                            startLocation: from,\n                            endLocation: `E-Bike Station near ${from}`,\n                            duration: 5,\n                            cost: 0,\n                            lineInfo: \"Walk to e-bike station\"\n                        },\n                        {\n                            mode: \"ebike\",\n                            startLocation: `E-Bike Station near ${from}`,\n                            endLocation: `E-Bike Station near ${to}`,\n                            duration: Math.round(distance * 12),\n                            cost: 5.00,\n                            lineInfo: \"Citi Bike E-Bike\"\n                        },\n                        {\n                            mode: \"walk\",\n                            startLocation: `E-Bike Station near ${to}`,\n                            endLocation: to,\n                            duration: 5,\n                            cost: 0,\n                            lineInfo: \"Walk to destination\"\n                        }\n                    ]\n                };\n                routes.push(ebikeRoute);\n            }\n            // 3. Try to create a bus route if available\n            if (busRoutesFrom.length > 0) {\n                // Use the connecting bus or an area-specific bus route\n                const busOption = {\n                    id: routes.length + \"\",\n                    name: \"Cheapest Route\",\n                    duration: Math.round(distance * 15),\n                    cost: 2.75,\n                    comfort: \"low\",\n                    vectorScore: 0.71,\n                    segments: []\n                };\n                // First walk segment\n                busOption.segments.push({\n                    mode: \"walk\",\n                    startLocation: from,\n                    endLocation: `Bus Stop near ${from}`,\n                    duration: 7,\n                    cost: 0,\n                    lineInfo: \"Walk to bus stop\"\n                });\n                // Cross-borough trips generally need subway or express bus\n                if (isCrossBoroughTrip) {\n                    if (expressBusRoute) {\n                        // Express bus option for cross-borough\n                        busOption.segments.push({\n                            mode: \"bus\",\n                            startLocation: `Bus Stop near ${from}`,\n                            endLocation: `Bus Stop near ${to}`,\n                            duration: Math.round(distance * 10),\n                            cost: 6.75,\n                            lineInfo: `${expressBusRoute} Express Bus`\n                        });\n                        busOption.cost = 6.75;\n                        busOption.name = \"Express Bus Route\";\n                        busOption.comfort = \"medium\";\n                    } else if (fromSubwayLines.length > 0 && toSubwayLines.length > 0) {\n                        // Use a combination of local bus and subway for cross-borough\n                        busOption.segments.push({\n                            mode: \"bus\",\n                            startLocation: `Bus Stop near ${from}`,\n                            endLocation: `${originBorough} Subway Station`,\n                            duration: 10,\n                            cost: 2.75,\n                            lineInfo: `${specificFromBuses[0]} Bus to subway`\n                        });\n                        // Add subway transfer\n                        busOption.segments.push({\n                            mode: \"subway\",\n                            startLocation: `${originBorough} Subway Station`,\n                            endLocation: `${destinationBorough} Subway Station`,\n                            duration: Math.round(distance * 7),\n                            cost: 0,\n                            lineInfo: `${fromSubwayLines[0]} Train`\n                        });\n                        busOption.name = \"Bus + Subway Route\";\n                    } else {\n                        // Fallback to just showing subway if it exists\n                        return routes;\n                    }\n                } else {\n                    // Local bus for same-borough trips\n                    busOption.segments.push({\n                        mode: \"bus\",\n                        startLocation: `Bus Stop near ${from}`,\n                        endLocation: `Bus Stop near ${to}`,\n                        duration: Math.round(distance * 12),\n                        cost: 2.75,\n                        lineInfo: `${busRoute} Bus`\n                    });\n                }\n                // Final walk segment\n                busOption.segments.push({\n                    mode: \"walk\",\n                    startLocation: `Bus Stop near ${to}`,\n                    endLocation: to,\n                    duration: 8,\n                    cost: 0,\n                    lineInfo: \"Walk to destination\"\n                });\n                // Update duration based on segments\n                busOption.duration = busOption.segments.reduce((total, segment)=>total + segment.duration, 0);\n                routes.push(busOption);\n            } else if (!bestSubwayLine && !hasTransferOptions) {\n                // 4. If no subway or bus is available, add a bike option\n                const bikeOption = {\n                    id: routes.length + \"\",\n                    name: \"Eco-Friendly Route\",\n                    duration: Math.round(distance * 18),\n                    cost: 3.50,\n                    comfort: \"medium\",\n                    vectorScore: 0.65,\n                    segments: [\n                        {\n                            mode: \"walk\",\n                            startLocation: from,\n                            endLocation: `Citi Bike Station near ${from}`,\n                            duration: 5,\n                            cost: 0,\n                            lineInfo: \"Walk to bike station\"\n                        },\n                        {\n                            mode: \"ebike\",\n                            startLocation: `Citi Bike Station near ${from}`,\n                            endLocation: `Citi Bike Station near ${to}`,\n                            duration: Math.round(distance * 15),\n                            cost: 3.50,\n                            lineInfo: \"Citi Bike\"\n                        },\n                        {\n                            mode: \"walk\",\n                            startLocation: `Citi Bike Station near ${to}`,\n                            endLocation: to,\n                            duration: 5,\n                            cost: 0,\n                            lineInfo: \"Walk to destination\"\n                        }\n                    ]\n                };\n                routes.push(bikeOption);\n            }\n            // Sort routes by balanced score\n            routes.forEach((route)=>{\n                route.balancedScore = calculateBalancedScore(route.duration, route.cost, route.comfort, 0, false, false, 1, true);\n            });\n            const mockRoutes = routes.map(finalizeRoute);\n            // Always ensure we have at least 3 routes\n            if (mockRoutes.length < 3) {\n                // Generate more diverse route options if needed\n                if (mockRoutes.length === 1) {\n                    // Add a slower but cheaper option\n                    const cheapestRoute = {\n                        id: \"98\",\n                        name: \"Economy Option\",\n                        duration: Math.round(distance * 18),\n                        cost: 2.75,\n                        comfort: \"low\",\n                        vectorScore: 0.65,\n                        segments: [\n                            {\n                                mode: \"walk\",\n                                startLocation: from,\n                                endLocation: `Bus Stop near ${from}`,\n                                duration: 10,\n                                cost: 0,\n                                lineInfo: \"Walk to bus stop\"\n                            },\n                            {\n                                mode: \"bus\",\n                                startLocation: `Bus Stop near ${from}`,\n                                endLocation: `Bus Stop near ${to}`,\n                                duration: Math.round(distance * 14),\n                                cost: 2.75,\n                                lineInfo: `Local Bus Route`\n                            },\n                            {\n                                mode: \"walk\",\n                                startLocation: `Bus Stop near ${to}`,\n                                endLocation: to,\n                                duration: 10,\n                                cost: 0,\n                                lineInfo: \"Walk to destination\"\n                            }\n                        ]\n                    };\n                    mockRoutes.push(finalizeRoute(cheapestRoute));\n                    // Add a faster but expensive option\n                    const fastestRoute = {\n                        id: \"99\",\n                        name: \"Premium Express\",\n                        duration: Math.round(distance * 8),\n                        cost: parseFloat((distance * 2.5).toFixed(2)),\n                        comfort: \"high\",\n                        vectorScore: 0.75,\n                        segments: [\n                            {\n                                mode: \"walk\",\n                                startLocation: from,\n                                endLocation: `Pickup near ${from}`,\n                                duration: 3,\n                                cost: 0,\n                                lineInfo: \"Walk to pickup point\"\n                            },\n                            {\n                                mode: \"uber\",\n                                startLocation: `Pickup near ${from}`,\n                                endLocation: to,\n                                duration: Math.round(distance * 7),\n                                cost: parseFloat((distance * 2.5).toFixed(2)),\n                                lineInfo: \"UberX Direct\"\n                            }\n                        ]\n                    };\n                    mockRoutes.push(finalizeRoute(fastestRoute));\n                }\n            }\n            // Filter routes based on wheelchair accessibility if required\n            let filteredRoutes = mockRoutes;\n            if (requireWheelchair) {\n                filteredRoutes = mockRoutes.filter((route)=>route.isWheelchairAccessible);\n                // If no accessible routes are found, generate at least one\n                if (filteredRoutes.length === 0) {\n                    const accessibleRoute = {\n                        id: \"99\",\n                        name: \"Wheelchair Accessible Route\",\n                        duration: Math.round(distance * 10),\n                        cost: parseFloat((distance * 2.8).toFixed(2)),\n                        comfort: \"high\",\n                        vectorScore: 0.7,\n                        segments: [\n                            {\n                                mode: \"walk\",\n                                startLocation: from,\n                                endLocation: `Accessible Pickup near ${from}`,\n                                duration: 5,\n                                cost: 0,\n                                lineInfo: \"Short accessible walk to pickup\",\n                                wheelchairAccessible: true\n                            },\n                            {\n                                mode: \"taxi\",\n                                startLocation: `Pickup near ${from}`,\n                                endLocation: to,\n                                duration: Math.round(distance * 9),\n                                cost: parseFloat((distance * 2.8).toFixed(2)),\n                                lineInfo: \"Wheelchair accessible taxi\",\n                                wheelchairAccessible: true\n                            }\n                        ],\n                        isWheelchairAccessible: true\n                    };\n                    filteredRoutes.push(finalizeRoute(accessibleRoute));\n                }\n            }\n            return filteredRoutes;\n        };\n        const routes = generateRoutes();\n        // Ensure we always provide at least 6 routes\n        if (routes.length < 6) {\n            // If we have fewer than 6 routes, create alternative versions with minor variations\n            const existingRoutesCount = routes.length;\n            for(let i = existingRoutesCount; i < 6; i++){\n                // Clone a route with slight modifications\n                const baseRoute = routes[i % existingRoutesCount];\n                const variationFactor = 0.05 + Math.random() * 0.15; // 5% to 20% variation\n                // Create a variation of the route\n                const variation = {\n                    ...JSON.parse(JSON.stringify(baseRoute)),\n                    id: `${baseRoute.id}-var${i}`,\n                    name: `Alternative Route ${i + 1}`,\n                    duration: Math.round(baseRoute.duration * (1 + (Math.random() > 0.5 ? variationFactor : -variationFactor))),\n                    cost: Math.round(baseRoute.cost * (1 + (Math.random() > 0.5 ? variationFactor : -variationFactor)) * 100) / 100,\n                    vectorScore: baseRoute.vectorScore * (1 - variationFactor * 0.5)\n                };\n                // Adjust segments slightly\n                if (variation.segments && variation.segments.length > 0) {\n                    variation.segments = variation.segments.map((segment)=>{\n                        // Small variations in durations and costs\n                        return {\n                            ...segment,\n                            duration: Math.max(1, Math.round(segment.duration * (1 + (Math.random() * 0.1 - 0.05)))),\n                            cost: Math.max(0, Math.round(segment.cost * (1 + (Math.random() * 0.1 - 0.05)) * 100) / 100)\n                        };\n                    });\n                    // Occasionally swap a segment for a different mode if possible\n                    if (variation.segments.length > 1 && Math.random() > 0.7) {\n                        const segmentToChange = Math.floor(Math.random() * variation.segments.length);\n                        const currentMode = variation.segments[segmentToChange].mode;\n                        // Choose a different mode\n                        const availableModes = [\n                            \"subway\",\n                            \"bus\",\n                            \"walk\",\n                            \"bike\",\n                            \"ebike\",\n                            \"taxi\"\n                        ];\n                        const alternativeModes = availableModes.filter((mode)=>mode !== currentMode);\n                        const newMode = alternativeModes[Math.floor(Math.random() * alternativeModes.length)];\n                        variation.segments[segmentToChange].mode = newMode;\n                        variation.segments[segmentToChange].color = getRouteColor(newMode);\n                    }\n                }\n                // Add the variation to the routes array\n                routes.push(variation);\n            }\n        }\n        return res.status(200).json({\n            routes: routes.slice(0, 6),\n            distance,\n            fromCoords,\n            toCoords,\n            subwayAvailable: bestSubwayLine !== null || hasTransferOptions,\n            transferRequired: !bestSubwayLine && hasTransferOptions,\n            traffic: {\n                origin: originTraffic,\n                destination: destinationTraffic,\n                average: avgTrafficFactor\n            },\n            topology: {\n                origin: originTopology,\n                destination: destinationTopology,\n                average: avgTopologyDifficulty\n            }\n        });\n    } catch (error) {\n        console.error(\"Error calculating routes:\", error);\n        return res.status(500).json({\n            message: \"Error calculating routes\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/routes.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Froutes&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Froutes.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();