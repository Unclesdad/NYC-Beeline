"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/routes";
exports.ids = ["pages/api/routes"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Froutes&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Froutes.ts&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Froutes&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Froutes.ts&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_routes_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/pages/api/routes.ts */ \"(api)/./src/pages/api/routes.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_routes_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_routes_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/routes\",\n        pathname: \"/api/routes\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _src_pages_api_routes_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnJvdXRlcyZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnNyYyUyRnBhZ2VzJTJGYXBpJTJGcm91dGVzLnRzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQ3NEO0FBQ3REO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyxxREFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMscURBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWJlZWxpbmUvPzUwODkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3NyYy9wYWdlcy9hcGkvcm91dGVzLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvcm91dGVzXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvcm91dGVzXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Froutes&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Froutes.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   transitAPI: () => (/* binding */ transitAPI)\n/* harmony export */ });\n// API configuration\nconst API_CONFIG = {\n    MTA_BASE_URL: \"https://api.mta.info/api\",\n    CITIBIKE_BASE_URL: \"https://gbfs.citibikenyc.com/gbfs/en\",\n    UBER_BASE_URL: \"https://api.uber.com/v1\",\n    GOOGLE_MAPS_BASE_URL: \"https://maps.googleapis.com/maps/api\"\n};\n// Mock data (in a real app, these would be API calls)\nconst mockSubwayData = [\n    {\n        line: \"A\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"medium\"\n    },\n    {\n        line: \"C\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"low\"\n    },\n    {\n        line: \"E\",\n        status: \"delayed\",\n        delay: 10,\n        crowd_level: \"high\"\n    },\n    {\n        line: \"B\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"medium\"\n    },\n    {\n        line: \"D\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"medium\"\n    },\n    {\n        line: \"F\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"medium\"\n    },\n    {\n        line: \"M\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"low\"\n    },\n    {\n        line: \"G\",\n        status: \"delayed\",\n        delay: 5,\n        crowd_level: \"low\"\n    },\n    {\n        line: \"L\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"high\"\n    },\n    {\n        line: \"N\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"medium\"\n    },\n    {\n        line: \"Q\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"medium\"\n    },\n    {\n        line: \"R\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"low\"\n    },\n    {\n        line: \"W\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"low\"\n    },\n    {\n        line: \"1\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"medium\"\n    },\n    {\n        line: \"2\",\n        status: \"delayed\",\n        delay: 8,\n        crowd_level: \"high\"\n    },\n    {\n        line: \"3\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"medium\"\n    },\n    {\n        line: \"4\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"high\"\n    },\n    {\n        line: \"5\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"medium\"\n    },\n    {\n        line: \"6\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"high\"\n    },\n    {\n        line: \"7\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"medium\"\n    },\n    {\n        line: \"J\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"low\"\n    },\n    {\n        line: \"Z\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"low\"\n    },\n    {\n        line: \"S\",\n        status: \"normal\",\n        delay: 0,\n        crowd_level: \"low\"\n    }\n];\nconst mockBusRoutes = [\n    \"Q58\",\n    \"Q59\",\n    \"Q60\",\n    \"B41\",\n    \"B42\",\n    \"B44\",\n    \"B45\",\n    \"B46\",\n    \"M1\",\n    \"M2\",\n    \"M3\",\n    \"M4\",\n    \"M5\",\n    \"BX1\",\n    \"BX2\",\n    \"BX9\",\n    \"BX10\",\n    \"S40\",\n    \"S44\",\n    \"S46\",\n    \"S48\"\n];\nconst generateMockBusData = ()=>{\n    return mockBusRoutes.map((route)=>({\n            route,\n            location: {\n                lat: 40.7128 + (Math.random() - 0.5) * 0.2,\n                lng: -74.0060 + (Math.random() - 0.5) * 0.2\n            },\n            next_stop: `${route} Stop ${Math.floor(Math.random() * 20) + 1}`,\n            estimated_arrival: new Date(Date.now() + Math.floor(Math.random() * 20) * 60000).toISOString(),\n            crowd_level: [\n                \"low\",\n                \"medium\",\n                \"high\"\n            ][Math.floor(Math.random() * 3)]\n        }));\n};\n// API service functions\nclass TransitAPI {\n    // Subway data\n    async getSubwayStatus() {\n        // In a real app, this would be an API call to MTA\n        // return axios.get(`${API_CONFIG.MTA_BASE_URL}/subway/status`).then(res => res.data);\n        // Using mock data for now\n        return Promise.resolve(mockSubwayData);\n    }\n    async getSubwayLine(line) {\n        // In a real app, this would be an API call to MTA\n        // return axios.get(`${API_CONFIG.MTA_BASE_URL}/subway/line/${line}`).then(res => res.data);\n        // Using mock data for now\n        const lineData = mockSubwayData.find((subway)=>subway.line === line);\n        return Promise.resolve(lineData || null);\n    }\n    // Bus data\n    async getBusRoutes(borough) {\n        // In a real app, this would be an API call\n        // return axios.get(`${API_CONFIG.MTA_BASE_URL}/bus/routes?borough=${borough}`).then(res => res.data);\n        // Using mock data filtered by borough prefix\n        const boroughPrefix = borough.charAt(0).toUpperCase();\n        const routes = mockBusRoutes.filter((route)=>route.startsWith(boroughPrefix));\n        return Promise.resolve(routes);\n    }\n    async getBusLocations(route) {\n        // In a real app, this would be an API call\n        // return axios.get(`${API_CONFIG.MTA_BASE_URL}/bus/route/${route}/locations`).then(res => res.data);\n        // Using mock data\n        const busData = generateMockBusData().filter((bus)=>bus.route === route);\n        return Promise.resolve(busData);\n    }\n    // Bike data\n    async getBikeStations(lat, lng, radius = 1) {\n        // In a real app, this would be an API call to Citi Bike\n        // return axios.get(`${API_CONFIG.CITIBIKE_BASE_URL}/station_information.json`).then(res => res.data.data.stations);\n        // Generate mock bike stations around the provided coordinates\n        const stations = [];\n        const stationCount = Math.floor(Math.random() * 5) + 3; // 3-7 stations\n        for(let i = 0; i < stationCount; i++){\n            const stationLat = lat + (Math.random() - 0.5) * 0.02 * radius;\n            const stationLng = lng + (Math.random() - 0.5) * 0.02 * radius;\n            stations.push({\n                station_id: `station-${i}`,\n                name: `Bike Station ${i + 1}`,\n                location: {\n                    lat: stationLat,\n                    lng: stationLng\n                },\n                available_bikes: Math.floor(Math.random() * 15),\n                available_docks: Math.floor(Math.random() * 10)\n            });\n        }\n        return Promise.resolve(stations);\n    }\n    // Uber/Taxi data\n    async getUberEstimate(startLat, startLng, endLat, endLng) {\n        // In a real app, this would be an API call to Uber\n        // return axios.get(`${API_CONFIG.UBER_BASE_URL}/estimates/price?start_latitude=${startLat}&start_longitude=${startLng}&end_latitude=${endLat}&end_longitude=${endLng}`).then(res => res.data.prices);\n        // Generate mock Uber options\n        const options = [\n            {\n                product_id: \"uberx\",\n                display_name: \"UberX\"\n            },\n            {\n                product_id: \"uberxl\",\n                display_name: \"UberXL\"\n            },\n            {\n                product_id: \"uberblack\",\n                display_name: \"Uber Black\"\n            },\n            {\n                product_id: \"uberpool\",\n                display_name: \"Uber Pool\"\n            }\n        ];\n        // Calculate mock duration and fare based on distance\n        const distance = this.calculateDistance(startLat, startLng, endLat, endLng);\n        return Promise.resolve(options.map((option)=>({\n                ...option,\n                estimate: {\n                    duration: Math.floor(distance * 120),\n                    fare: Math.floor((option.product_id === \"uberpool\" ? 2.0 : 2.5) * distance * 100) / 100\n                }\n            })));\n    }\n    async getTaxiEstimate(startLat, startLng, endLat, endLng) {\n        // In a real app, this would be an API call or calculation\n        // return axios.get(`${API_CONFIG.TAXI_BASE_URL}/estimate?start_latitude=${startLat}&start_longitude=${startLng}&end_latitude=${endLat}&end_longitude=${endLng}`).then(res => res.data.fare);\n        // Calculate mock taxi fare based on distance\n        const distance = this.calculateDistance(startLat, startLng, endLat, endLng);\n        const baseFare = 2.50;\n        const perMileFare = 2.50;\n        return Promise.resolve(Math.floor((baseFare + distance * perMileFare) * 100) / 100);\n    }\n    // Helper functions\n    calculateDistance(lat1, lng1, lat2, lng2) {\n        const R = 3958.8; // Earth radius in miles\n        const dLat = this.toRadians(lat2 - lat1);\n        const dLng = this.toRadians(lng2 - lng1);\n        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        const distance = R * c;\n        return distance;\n    }\n    toRadians(degrees) {\n        return degrees * Math.PI / 180;\n    }\n}\n// Export a singleton instance\nconst transitAPI = new TransitAPI();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/api.ts\n");

/***/ }),

/***/ "(api)/./src/pages/api/routes.ts":
/*!*********************************!*\
  !*** ./src/pages/api/routes.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/api */ \"(api)/./src/lib/api.ts\");\n\n// Mock coordinates for some NYC locations\nconst locationCoordinates = {\n    \"Manhattan\": [\n        40.7831,\n        -73.9712\n    ],\n    \"Brooklyn\": [\n        40.6782,\n        -73.9442\n    ],\n    \"Queens\": [\n        40.7282,\n        -73.7949\n    ],\n    \"Bronx\": [\n        40.8448,\n        -73.8648\n    ],\n    \"Staten Island\": [\n        40.5795,\n        -74.1502\n    ],\n    \"Times Square\": [\n        40.7580,\n        -73.9855\n    ],\n    \"Central Park\": [\n        40.7829,\n        -73.9654\n    ],\n    \"Prospect Park\": [\n        40.6602,\n        -73.9690\n    ],\n    \"Flushing Meadows\": [\n        40.7466,\n        -73.8422\n    ],\n    \"Flushing\": [\n        40.7654,\n        -73.8318\n    ],\n    \"Bayside\": [\n        40.7612,\n        -73.7716\n    ],\n    \"Main St\": [\n        40.7590,\n        -73.8300\n    ],\n    \"Yankee Stadium\": [\n        40.8296,\n        -73.9262\n    ]\n};\n// Traffic data mock (in a real app this would be real-time data)\nconst trafficConditions = {\n    \"Manhattan\": {\n        level: \"high\",\n        factor: 1.5\n    },\n    \"Brooklyn\": {\n        level: \"medium\",\n        factor: 1.3\n    },\n    \"Queens\": {\n        level: \"medium\",\n        factor: 1.2\n    },\n    \"Bronx\": {\n        level: \"medium\",\n        factor: 1.25\n    },\n    \"Staten Island\": {\n        level: \"low\",\n        factor: 1.1\n    },\n    \"Flushing\": {\n        level: \"medium\",\n        factor: 1.2\n    },\n    \"Bayside\": {\n        level: \"low\",\n        factor: 1.1\n    },\n    \"Times Square\": {\n        level: \"high\",\n        factor: 1.6\n    },\n    \"Central Park\": {\n        level: \"medium\",\n        factor: 1.3\n    }\n};\n// Topology data - elevation changes that affect walking/biking comfort\nconst topologyDifficulty = {\n    \"Manhattan\": 0.2,\n    \"Brooklyn\": 0.1,\n    \"Queens\": 0.1,\n    \"Bronx\": 0.4,\n    \"Staten Island\": 0.5,\n    \"Flushing\": 0.1,\n    \"Bayside\": 0.2,\n    \"Times Square\": 0.1,\n    \"Central Park\": 0.3\n};\n// Helper function to get coordinates from a location string\nconst getCoordinates = (location)=>{\n    // Normalize the location string for better matching\n    const normalizedLocation = location.toLowerCase();\n    // First try exact matches for specific neighborhoods/locations\n    for (const [name, coords] of Object.entries(locationCoordinates)){\n        if (normalizedLocation.includes(name.toLowerCase())) {\n            return coords;\n        }\n    }\n    // If no specific match, try to determine which borough it's in\n    if (normalizedLocation.includes(\"queens\") || normalizedLocation.includes(\"flushing\") || normalizedLocation.includes(\"bayside\") || normalizedLocation.includes(\"jamaica\") || normalizedLocation.includes(\"astoria\")) {\n        return locationCoordinates[\"Queens\"];\n    }\n    if (normalizedLocation.includes(\"brooklyn\") || normalizedLocation.includes(\"williamsburg\") || normalizedLocation.includes(\"park slope\")) {\n        return locationCoordinates[\"Brooklyn\"];\n    }\n    if (normalizedLocation.includes(\"bronx\")) {\n        return locationCoordinates[\"Bronx\"];\n    }\n    if (normalizedLocation.includes(\"staten\")) {\n        return locationCoordinates[\"Staten Island\"];\n    }\n    // Default to Manhattan if not found\n    return locationCoordinates[\"Manhattan\"];\n};\n// Helper function to calculate distance between two coordinates\nconst calculateDistance = (lat1, lng1, lat2, lng2)=>{\n    const R = 3958.8; // Earth radius in miles\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLng = (lng2 - lng1) * Math.PI / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c;\n    return distance;\n};\n// Define the route colors for different modes\nconst getRouteColor = (mode)=>{\n    switch(mode){\n        case \"subway\":\n            return \"#3b82f6\"; // blue-500\n        case \"bus\":\n            return \"#22c55e\"; // green-500\n        case \"walk\":\n            return \"#6b7280\"; // gray-500\n        case \"bike\":\n        case \"ebike\":\n            return \"#8b5cf6\"; // purple-500\n        case \"ferry\":\n            return \"#06b6d4\"; // cyan-500\n        case \"taxi\":\n        case \"uber\":\n            return \"#f59e0b\"; // amber-500\n        default:\n            return \"#ef4444\"; // red-500\n    }\n};\n// Add this after getRouteColor function and before interface RouteItem\nconst calculateCO2Emissions = (mode, distanceKm)=>{\n    // CO2 emissions in grams per kilometer\n    const emissionsFactors = {\n        \"subway\": 30,\n        \"bus\": 70,\n        \"walk\": 0,\n        \"bike\": 0,\n        \"ebike\": 5,\n        \"ferry\": 120,\n        \"taxi\": 150,\n        \"uber\": 150,\n        \"shared\": 90,\n        \"default\": 100 // Default value\n    };\n    // If mode is walking or biking, return 0 regardless of distance\n    if (mode === \"walk\" || mode === \"bike\") {\n        return 0;\n    }\n    const emissionFactor = emissionsFactors[mode] || emissionsFactors.default;\n    return Math.round(emissionFactor * distanceKm);\n};\nasync function handler(req, res) {\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            message: \"Method Not Allowed\"\n        });\n    }\n    const { from, to, priority, noise, safety, bags, wheelchair } = req.query;\n    if (!from || !to) {\n        return res.status(400).json({\n            message: \"Origin and destination are required\"\n        });\n    }\n    try {\n        // In a real app, we would use geocoding to get coordinates\n        const fromCoords = getCoordinates(from);\n        const toCoords = getCoordinates(to);\n        // Log the coordinates for debugging\n        console.log(`From location: \"${from}\" → coordinates: [${fromCoords[0]}, ${fromCoords[1]}]`);\n        console.log(`To location: \"${to}\" → coordinates: [${toCoords[0]}, ${toCoords[1]}]`);\n        // Get user preferences\n        const userPriority = priority || \"balanced\";\n        const userNoise = noise || \"moderate\";\n        const userSafety = safety || \"moderate\";\n        const userBags = parseInt(bags || \"0\", 10);\n        const requireWheelchair = wheelchair === \"true\";\n        // Calculate distance\n        const distance = calculateDistance(fromCoords[0], fromCoords[1], toCoords[0], toCoords[1]);\n        // Get real-time transit data\n        const subwayStatus = await _lib_api__WEBPACK_IMPORTED_MODULE_0__.transitAPI.getSubwayStatus();\n        // Determine available subway lines based on location\n        const subwayLinesByLocation = {\n            \"Manhattan\": [\n                \"1\",\n                \"2\",\n                \"3\",\n                \"4\",\n                \"5\",\n                \"6\",\n                \"A\",\n                \"C\",\n                \"E\",\n                \"B\",\n                \"D\",\n                \"F\",\n                \"M\",\n                \"N\",\n                \"Q\",\n                \"R\",\n                \"W\",\n                \"L\"\n            ],\n            \"Brooklyn\": [\n                \"A\",\n                \"C\",\n                \"G\",\n                \"J\",\n                \"Z\",\n                \"L\",\n                \"M\",\n                \"N\",\n                \"Q\",\n                \"R\",\n                \"2\",\n                \"3\",\n                \"4\",\n                \"5\"\n            ],\n            \"Queens\": [\n                \"E\",\n                \"F\",\n                \"M\",\n                \"R\",\n                \"N\",\n                \"W\",\n                \"G\",\n                \"7\"\n            ],\n            \"Bronx\": [\n                \"1\",\n                \"2\",\n                \"4\",\n                \"5\",\n                \"6\",\n                \"B\",\n                \"D\"\n            ],\n            \"Staten Island\": [\n                \"SIR\"\n            ],\n            \"Flushing\": [\n                \"7\"\n            ],\n            \"Main St\": [\n                \"7\"\n            ],\n            \"Times Square\": [\n                \"1\",\n                \"2\",\n                \"3\",\n                \"N\",\n                \"Q\",\n                \"R\",\n                \"W\",\n                \"7\",\n                \"S\"\n            ],\n            \"Central Park\": [\n                \"A\",\n                \"B\",\n                \"C\",\n                \"D\",\n                \"1\"\n            ],\n            \"Yankee Stadium\": [\n                \"4\",\n                \"B\",\n                \"D\"\n            ],\n            \"JFK Airport\": [\n                \"A\",\n                \"E\"\n            ],\n            \"LaGuardia Airport\": [],\n            \"Prospect Park\": [\n                \"B\",\n                \"Q\",\n                \"S\"\n            ]\n        };\n        // Determine from and to areas to check subway availability\n        const fromArea = Object.keys(locationCoordinates).find((area)=>from.toLowerCase().includes(area.toLowerCase())) || \"Manhattan\";\n        const toArea = Object.keys(locationCoordinates).find((area)=>to.toLowerCase().includes(area.toLowerCase())) || \"Manhattan\";\n        // Check available subway lines for the route\n        const fromSubwayLines = subwayLinesByLocation[fromArea] || [];\n        const toSubwayLines = subwayLinesByLocation[toArea] || [];\n        // Find common subway lines or lines that can get you there with a transfer\n        let availableSubwayLines = fromSubwayLines.filter((line)=>toSubwayLines.includes(line));\n        // If no direct lines, consider options with transfers\n        const hasTransferOptions = fromSubwayLines.length > 0 && toSubwayLines.length > 0;\n        // Check subway status to see if the lines are operating normally\n        const operatingSubwayLines = availableSubwayLines.filter((line)=>{\n            const lineStatus = subwayStatus.find((s)=>s.line === line);\n            return lineStatus && lineStatus.status === \"normal\";\n        });\n        // Filter to just get one operating line if available\n        const bestSubwayLine = operatingSubwayLines.length > 0 ? operatingSubwayLines[0] : null;\n        // Get all the bus routes for both areas\n        const fromBoroughPrefix = fromArea.charAt(0).toUpperCase();\n        const toBoroughPrefix = toArea.charAt(0).toUpperCase();\n        const busRoutesFrom = await _lib_api__WEBPACK_IMPORTED_MODULE_0__.transitAPI.getBusRoutes(fromArea);\n        // Map specific neighborhoods to appropriate bus routes\n        const busRoutesByArea = {\n            \"Manhattan\": [\n                \"M1\",\n                \"M2\",\n                \"M3\",\n                \"M4\",\n                \"M5\",\n                \"M15\",\n                \"M31\",\n                \"M42\",\n                \"M60\"\n            ],\n            \"Brooklyn\": [\n                \"B41\",\n                \"B42\",\n                \"B44\",\n                \"B46\",\n                \"B67\",\n                \"B68\",\n                \"B69\"\n            ],\n            \"Queens\": [\n                \"Q58\",\n                \"Q59\",\n                \"Q60\",\n                \"Q65\",\n                \"Q66\",\n                \"Q44\",\n                \"Q46\"\n            ],\n            \"Bronx\": [\n                \"BX1\",\n                \"BX2\",\n                \"BX9\",\n                \"BX10\",\n                \"BX12\",\n                \"BX22\"\n            ],\n            \"Staten Island\": [\n                \"S40\",\n                \"S44\",\n                \"S46\",\n                \"S48\",\n                \"S51\",\n                \"S53\"\n            ],\n            \"Flushing\": [\n                \"Q65\",\n                \"Q66\",\n                \"Q17\",\n                \"Q27\",\n                \"Q44\"\n            ],\n            \"Bayside\": [\n                \"Q27\",\n                \"Q31\",\n                \"Q76\",\n                \"Q13\"\n            ],\n            \"Times Square\": [\n                \"M42\",\n                \"M104\",\n                \"Q104\"\n            ],\n            \"JFK Airport\": [\n                \"Q3\",\n                \"Q10\",\n                \"B15\"\n            ],\n            \"LaGuardia Airport\": [\n                \"Q70\",\n                \"M60\"\n            ]\n        };\n        // Get specific bus routes for origin and destination\n        const specificFromBuses = busRoutesByArea[fromArea] || [];\n        const specificToBuses = busRoutesByArea[toArea] || [];\n        // Find bus routes that might connect the two areas\n        let connectingBuses = specificFromBuses.filter((bus)=>specificToBuses.includes(bus));\n        // Check if origin and destination are in different boroughs\n        const originBorough = fromArea === \"Manhattan\" || fromArea === \"Times Square\" || fromArea === \"Central Park\" ? \"Manhattan\" : fromArea === \"Brooklyn\" || fromArea === \"Prospect Park\" ? \"Brooklyn\" : fromArea === \"Queens\" || fromArea === \"Flushing\" || fromArea === \"Bayside\" || fromArea === \"JFK Airport\" ? \"Queens\" : fromArea === \"Bronx\" || fromArea === \"Yankee Stadium\" ? \"Bronx\" : fromArea === \"Staten Island\" ? \"Staten Island\" : \"Manhattan\";\n        const destinationBorough = toArea === \"Manhattan\" || toArea === \"Times Square\" || toArea === \"Central Park\" ? \"Manhattan\" : toArea === \"Brooklyn\" || toArea === \"Prospect Park\" ? \"Brooklyn\" : toArea === \"Queens\" || toArea === \"Flushing\" || toArea === \"Bayside\" || toArea === \"JFK Airport\" ? \"Queens\" : toArea === \"Bronx\" || toArea === \"Yankee Stadium\" ? \"Bronx\" : toArea === \"Staten Island\" ? \"Staten Island\" : \"Manhattan\";\n        // Check if this is a cross-borough trip requiring transfers\n        const isCrossBoroughTrip = originBorough !== destinationBorough;\n        // Express Bus routes for cross-borough travel\n        const expressBusRoutes = {\n            \"Queens-Manhattan\": [\n                \"QM1\",\n                \"QM5\",\n                \"QM7\",\n                \"QM8\"\n            ],\n            \"Brooklyn-Manhattan\": [\n                \"BM1\",\n                \"BM2\",\n                \"BM3\",\n                \"BM4\"\n            ],\n            \"Bronx-Manhattan\": [\n                \"BxM1\",\n                \"BxM2\",\n                \"BxM3\",\n                \"BxM4\"\n            ],\n            \"Staten Island-Manhattan\": [\n                \"SIM1\",\n                \"SIM3\",\n                \"SIM4\",\n                \"SIM5\"\n            ]\n        };\n        // Get appropriate express bus if this is cross-borough\n        let expressBusRoute = \"\";\n        if (isCrossBoroughTrip) {\n            const routeKey = `${originBorough}-${destinationBorough}`;\n            const reverseRouteKey = `${destinationBorough}-${originBorough}`;\n            if (expressBusRoutes[routeKey]) {\n                expressBusRoute = expressBusRoutes[routeKey][0];\n            } else if (expressBusRoutes[reverseRouteKey]) {\n                expressBusRoute = expressBusRoutes[reverseRouteKey][0];\n            }\n        }\n        // If no direct connection, pick a bus from origin for local trips only\n        // For cross-borough trips without express buses, we'll rely on subway instead\n        if (connectingBuses.length === 0 && specificFromBuses.length > 0 && !isCrossBoroughTrip) {\n            connectingBuses = [\n                specificFromBuses[0]\n            ];\n        }\n        // Default to a borough-specific bus if nothing else is available\n        const busRoute = connectingBuses.length > 0 ? connectingBuses[0] : expressBusRoute || `${fromBoroughPrefix}${Math.floor(Math.random() * 50) + 1}`;\n        // Get traffic conditions for origin and destination areas\n        const originTraffic = trafficConditions[originBorough] || {\n            level: \"medium\",\n            factor: 1.25\n        };\n        const destinationTraffic = trafficConditions[destinationBorough] || {\n            level: \"medium\",\n            factor: 1.25\n        };\n        // Get topology difficulty for each area\n        const originTopology = topologyDifficulty[originBorough] || 0.2;\n        const destinationTopology = topologyDifficulty[destinationBorough] || 0.2;\n        // Calculate average traffic and topology difficulty\n        const avgTrafficFactor = (originTraffic.factor + destinationTraffic.factor) / 2;\n        const avgTopologyDifficulty = (originTopology + destinationTopology) / 2;\n        const generateRoutes = ()=>{\n            const routes = [];\n            // Helper function to calculate balanced score\n            const calculateBalancedScore = (duration, cost, comfort, numTransfers)=>{\n                // Simple scoring system\n                const timeScore = Math.max(0, 1 - duration / 120); // Normalize to 0-1 (2 hours max)\n                const costScore = Math.max(0, 1 - cost / 30); // Normalize to 0-1 ($30 max)\n                const comfortScore = comfort === \"high\" ? 1 : comfort === \"medium\" ? 0.6 : 0.3;\n                const transferScore = Math.max(0, 1 - numTransfers * 0.2);\n                // Weighted average\n                const score = timeScore * 0.4 + costScore * 0.3 + comfortScore * 0.2 + transferScore * 0.1;\n                return {\n                    raw: score,\n                    score: Math.round(score * 10),\n                    timeScore: Math.round(timeScore * 10),\n                    costScore: Math.round(costScore * 10),\n                    comfortScore: Math.round(comfortScore * 10),\n                    transferScore: Math.round(transferScore * 10)\n                };\n            };\n            // Always add a walking route as a baseline option\n            const walkingRoute = {\n                id: \"0\",\n                name: \"Walking Route\",\n                duration: Math.round(distance * 20),\n                cost: 0,\n                comfort: \"medium\",\n                vectorScore: 0.5,\n                segments: [\n                    {\n                        mode: \"walk\",\n                        startLocation: from,\n                        endLocation: to,\n                        duration: Math.round(distance * 20),\n                        cost: 0,\n                        lineInfo: \"Walk to destination\"\n                    }\n                ]\n            };\n            walkingRoute.balancedScore = calculateBalancedScore(walkingRoute.duration, walkingRoute.cost, walkingRoute.comfort, 0);\n            // Calculate CO2 for walking (0 emissions)\n            walkingRoute.co2 = calculateCO2Emissions(\"walk\", distance * 1.60934); // Convert miles to km\n            routes.push(walkingRoute);\n            // Add a bike route if distance is reasonable (less than 10 miles)\n            if (distance < 10) {\n                const bikeRoute = {\n                    id: \"1\",\n                    name: \"Bike Route\",\n                    duration: Math.round(distance * 12),\n                    cost: 3.50,\n                    comfort: \"medium\",\n                    vectorScore: 0.65,\n                    segments: [\n                        {\n                            mode: \"bike\",\n                            startLocation: from,\n                            endLocation: to,\n                            duration: Math.round(distance * 12),\n                            cost: 3.50,\n                            lineInfo: \"Citi Bike\"\n                        }\n                    ]\n                };\n                bikeRoute.balancedScore = calculateBalancedScore(bikeRoute.duration, bikeRoute.cost, bikeRoute.comfort, 0);\n                // Calculate CO2 for biking (0 emissions)\n                bikeRoute.co2 = calculateCO2Emissions(\"bike\", distance * 1.60934);\n                routes.push(bikeRoute);\n            }\n            // Add subway routes if available\n            if (bestSubwayLine || hasTransferOptions) {\n                const subwayRoute = {\n                    id: \"2\",\n                    name: \"Subway Route\",\n                    duration: Math.round(distance * 8) + 10,\n                    cost: 2.90,\n                    comfort: \"high\",\n                    vectorScore: 0.8,\n                    segments: [\n                        {\n                            mode: \"walk\",\n                            startLocation: from,\n                            endLocation: \"Subway Station\",\n                            duration: 5,\n                            cost: 0,\n                            lineInfo: \"Walk to station\"\n                        },\n                        {\n                            mode: \"subway\",\n                            startLocation: \"Subway Station\",\n                            endLocation: \"Subway Station\",\n                            duration: Math.round(distance * 8),\n                            cost: 2.90,\n                            lineInfo: bestSubwayLine ? `${bestSubwayLine} Train` : \"Subway\"\n                        },\n                        {\n                            mode: \"walk\",\n                            startLocation: \"Subway Station\",\n                            endLocation: to,\n                            duration: 5,\n                            cost: 0,\n                            lineInfo: \"Walk to destination\"\n                        }\n                    ]\n                };\n                subwayRoute.balancedScore = calculateBalancedScore(subwayRoute.duration, subwayRoute.cost, subwayRoute.comfort, 0);\n                // Calculate CO2 for subway route (walking + subway segments)\n                subwayRoute.co2 = calculateCO2Emissions(\"walk\", 0.4) + // Assuming 0.4 km walking total\n                calculateCO2Emissions(\"subway\", distance * 1.60934); // Main subway journey\n                routes.push(subwayRoute);\n            }\n            // Add bus route\n            const busRoute = {\n                id: \"3\",\n                name: \"Bus Route\",\n                duration: Math.round(distance * 15) + 10,\n                cost: 2.90,\n                comfort: \"medium\",\n                vectorScore: 0.6,\n                segments: [\n                    {\n                        mode: \"walk\",\n                        startLocation: from,\n                        endLocation: \"Bus Stop\",\n                        duration: 5,\n                        cost: 0,\n                        lineInfo: \"Walk to bus stop\"\n                    },\n                    {\n                        mode: \"bus\",\n                        startLocation: \"Bus Stop\",\n                        endLocation: \"Bus Stop\",\n                        duration: Math.round(distance * 15),\n                        cost: 2.90,\n                        lineInfo: `Local Bus`\n                    },\n                    {\n                        mode: \"walk\",\n                        startLocation: \"Bus Stop\",\n                        endLocation: to,\n                        duration: 5,\n                        cost: 0,\n                        lineInfo: \"Walk to destination\"\n                    }\n                ]\n            };\n            busRoute.balancedScore = calculateBalancedScore(busRoute.duration, busRoute.cost, busRoute.comfort, 0);\n            // Calculate CO2 for bus route (walking + bus segments)\n            busRoute.co2 = calculateCO2Emissions(\"walk\", 0.4) + // Assuming 0.4 km walking total\n            calculateCO2Emissions(\"bus\", distance * 1.60934); // Main bus journey\n            routes.push(busRoute);\n            // Add express bus for longer distances\n            if (distance > 5) {\n                const expressBusRoute = {\n                    id: \"4\",\n                    name: \"Express Bus Route\",\n                    duration: Math.round(distance * 10) + 10,\n                    cost: 7.00,\n                    comfort: \"high\",\n                    vectorScore: 0.75,\n                    segments: [\n                        {\n                            mode: \"walk\",\n                            startLocation: from,\n                            endLocation: \"Express Bus Stop\",\n                            duration: 5,\n                            cost: 0,\n                            lineInfo: \"Walk to bus stop\"\n                        },\n                        {\n                            mode: \"bus\",\n                            startLocation: \"Express Bus Stop\",\n                            endLocation: \"Express Bus Stop\",\n                            duration: Math.round(distance * 10),\n                            cost: 7.00,\n                            lineInfo: \"Express Bus\"\n                        },\n                        {\n                            mode: \"walk\",\n                            startLocation: \"Express Bus Stop\",\n                            endLocation: to,\n                            duration: 5,\n                            cost: 0,\n                            lineInfo: \"Walk to destination\"\n                        }\n                    ]\n                };\n                expressBusRoute.balancedScore = calculateBalancedScore(expressBusRoute.duration, expressBusRoute.cost, expressBusRoute.comfort, 0);\n                // Calculate CO2 for express bus route (walking + bus segments)\n                expressBusRoute.co2 = calculateCO2Emissions(\"walk\", 0.4) + // Assuming 0.4 km walking total\n                calculateCO2Emissions(\"bus\", distance * 1.60934); // Main bus journey\n                routes.push(expressBusRoute);\n            }\n            // Add a ride-sharing route as another option\n            const uberRoute = {\n                id: \"5\",\n                name: \"Ride-Share Route\",\n                duration: Math.round(distance * 3),\n                cost: parseFloat((distance * 2.5).toFixed(2)),\n                comfort: \"high\",\n                vectorScore: 0.78,\n                segments: [\n                    {\n                        mode: \"uber\",\n                        startLocation: from,\n                        endLocation: to,\n                        duration: Math.round(distance * 3),\n                        cost: parseFloat((distance * 2.5).toFixed(2)),\n                        lineInfo: \"UberX\"\n                    }\n                ]\n            };\n            uberRoute.balancedScore = calculateBalancedScore(uberRoute.duration, uberRoute.cost, uberRoute.comfort, 0);\n            // Calculate CO2 for ride-share route\n            uberRoute.co2 = calculateCO2Emissions(\"uber\", distance * 1.60934);\n            routes.push(uberRoute);\n            // Sort routes by balanced score (highest first)\n            routes.sort((a, b)=>(b.balancedScore?.score || 0) - (a.balancedScore?.score || 0));\n            return routes;\n        };\n        const routes = generateRoutes();\n        // Helper function to finalize route details\n        const finalizeRoute = (route)=>{\n            // Calculate number of transfers\n            const numTransfers = route.segments.length > 0 ? route.segments.length - 1 : 0;\n            // Check if route has walking/biking components\n            const hasTopologyImpact = route.segments.some((segment)=>segment.mode === \"walk\" || segment.mode === \"ebike\");\n            // Calculate traffic impact for road-based segments\n            const roadBasedSegments = route.segments.filter((segment)=>segment.mode === \"bus\" || segment.mode === \"uber\" || segment.mode === \"taxi\");\n            const trafficImpact = roadBasedSegments.length > 0 ? avgTrafficFactor : 1.0;\n            // Calculate ETA\n            const now = new Date();\n            const eta = new Date(now.getTime() + route.duration * 60000);\n            // Add route color based on mode\n            const routeColor = getRouteColor(route.segments[0]?.mode || \"walk\");\n            // Return enhanced route\n            return {\n                ...route,\n                numTransfers,\n                hasTopologyImpact,\n                traffic: {\n                    level: trafficImpact > 1.3 ? \"high\" : trafficImpact > 1.1 ? \"medium\" : \"low\",\n                    impact: trafficImpact\n                },\n                eta: eta.toLocaleTimeString([], {\n                    hour: \"2-digit\",\n                    minute: \"2-digit\"\n                }),\n                routeColor,\n                isWheelchairAccessible: true\n            };\n        };\n        const mockRoutes = routes.map(finalizeRoute);\n        // Only sort if we have routes\n        if (mockRoutes.length > 0) {\n            // Sort routes by their balanced score (highest to lowest)\n            mockRoutes.sort((a, b)=>{\n                // Ensure we have valid scores\n                const scoreA = a.scores?.overall || a.balancedScore?.score || 0;\n                const scoreB = b.scores?.overall || b.balancedScore?.score || 0;\n                // Sort in descending order (highest score first)\n                if (scoreA !== scoreB) {\n                    return scoreB - scoreA;\n                }\n                // If scores are equal, prefer faster routes first\n                return (a.duration || 0) - (b.duration || 0);\n            });\n            // Add \"best\" indicator to the first route (now the best one)\n            mockRoutes[0].name = `${mockRoutes[0].name} (Best Route)`;\n        }\n        // Return error if no routes found\n        if (mockRoutes.length === 0) {\n            return res.status(404).json({\n                error: \"No routes found\",\n                message: \"We couldn't find any routes between these locations. Please try different locations or adjust your preferences.\"\n            });\n        }\n        // Return the sorted routes\n        return res.status(200).json({\n            routes: mockRoutes.slice(0, 6),\n            distance,\n            fromCoords,\n            toCoords,\n            subwayAvailable: bestSubwayLine !== null || hasTransferOptions,\n            transferRequired: !bestSubwayLine && hasTransferOptions,\n            traffic: {\n                origin: originTraffic,\n                destination: destinationTraffic,\n                average: avgTrafficFactor\n            },\n            topology: {\n                origin: originTopology,\n                destination: destinationTopology,\n                average: avgTopologyDifficulty\n            }\n        });\n    } catch (error) {\n        console.error(\"Error calculating routes:\", error);\n        return res.status(500).json({\n            message: \"Error calculating routes\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/routes.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Froutes&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Froutes.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();